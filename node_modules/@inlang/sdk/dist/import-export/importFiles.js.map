{"version":3,"file":"importFiles.js","sourceRoot":"/","sources":["import-export/importFiles.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Kysely } from \"kysely\";\nimport {\n\tPluginDoesNotImplementFunctionError,\n\tPluginMissingError,\n} from \"../plugin/errors.js\";\nimport type { ProjectSettings } from \"../json-schema/settings.js\";\nimport type { InlangDatabaseSchema, NewVariant } from \"../database/schema.js\";\nimport type { InlangPlugin, VariantImport } from \"../plugin/schema.js\";\nimport type { ImportFile } from \"../project/api.js\";\n\nexport async function importFiles(args: {\n\tfiles: ImportFile[];\n\treadonly pluginKey: string;\n\treadonly settings: ProjectSettings;\n\treadonly plugins: readonly InlangPlugin[];\n\treadonly db: Kysely<InlangDatabaseSchema>;\n}) {\n\tconst plugin = args.plugins.find((p) => p.key === args.pluginKey);\n\n\tif (!plugin) throw new PluginMissingError({ plugin: args.pluginKey });\n\n\tif (!plugin.importFiles) {\n\t\tthrow new PluginDoesNotImplementFunctionError({\n\t\t\tplugin: args.pluginKey,\n\t\t\tfunction: \"importFiles\",\n\t\t});\n\t}\n\n\tconst imported = await plugin.importFiles({\n\t\tfiles: args.files,\n\t\tsettings: structuredClone(args.settings),\n\t});\n\n\tawait args.db.transaction().execute(async (trx) => {\n\t\t// upsert every bundle\n\t\tfor (const bundle of imported.bundles) {\n\t\t\tawait trx\n\t\t\t\t.insertInto(\"bundle\")\n\t\t\t\t.values(bundle)\n\t\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(bundle))\n\t\t\t\t.execute();\n\t\t}\n\t\t// upsert every message\n\t\tfor (const message of imported.messages) {\n\t\t\t// match the message by bundle id and locale if\n\t\t\t// no id is provided by the importer\n\t\t\tif (message.id === undefined) {\n\t\t\t\tconst exisingMessage = await trx\n\t\t\t\t\t.selectFrom(\"message\")\n\t\t\t\t\t.where(\"bundleId\", \"=\", message.bundleId)\n\t\t\t\t\t.where(\"locale\", \"=\", message.locale)\n\t\t\t\t\t.select(\"id\")\n\t\t\t\t\t.executeTakeFirst();\n\t\t\t\tmessage.id = exisingMessage?.id;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait trx\n\t\t\t\t\t.insertInto(\"message\")\n\t\t\t\t\t.values(message)\n\t\t\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(message))\n\t\t\t\t\t.execute();\n\t\t\t} catch (e) {\n\t\t\t\t// 787 = SQLITE_CONSTRAINT_FOREIGNKEY\n\t\t\t\t// handle foreign key violation\n\t\t\t\t// e.g. a message references a bundle that doesn't exist\n\t\t\t\t// by creating the bundle\n\t\t\t\tif ((e as any)?.resultCode === 787) {\n\t\t\t\t\tawait trx\n\t\t\t\t\t\t.insertInto(\"bundle\")\n\t\t\t\t\t\t.values({ id: message.bundleId })\n\t\t\t\t\t\t.execute();\n\t\t\t\t\tawait trx.insertInto(\"message\").values(message).execute();\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// upsert every variant\n\t\tfor (const variant of imported.variants) {\n\t\t\t// match the variant by message id and matches if\n\t\t\t// no id is provided by the importer\n\t\t\tif (variant.id === undefined) {\n\t\t\t\tlet existingMessage = await trx\n\t\t\t\t\t.selectFrom(\"message\")\n\t\t\t\t\t.where(\"bundleId\", \"=\", variant.messageBundleId)\n\t\t\t\t\t.where(\"locale\", \"=\", variant.messageLocale)\n\t\t\t\t\t.select(\"id\")\n\t\t\t\t\t.executeTakeFirst();\n\n\t\t\t\t// if the message does not exist, create it\n\t\t\t\tif (existingMessage === undefined) {\n\t\t\t\t\tconst existingBundle = await trx\n\t\t\t\t\t\t.selectFrom(\"bundle\")\n\t\t\t\t\t\t.where(\"id\", \"=\", variant.messageBundleId)\n\t\t\t\t\t\t.select(\"id\")\n\t\t\t\t\t\t.executeTakeFirst();\n\t\t\t\t\t// if the bundle does not exist, create it\n\t\t\t\t\tif (existingBundle === undefined) {\n\t\t\t\t\t\tawait trx\n\t\t\t\t\t\t\t.insertInto(\"bundle\")\n\t\t\t\t\t\t\t.values({ id: variant.messageBundleId })\n\t\t\t\t\t\t\t.execute();\n\t\t\t\t\t}\n\t\t\t\t\t// insert the message\n\t\t\t\t\texistingMessage = await trx\n\t\t\t\t\t\t.insertInto(\"message\")\n\t\t\t\t\t\t.values({\n\t\t\t\t\t\t\tbundleId: variant.messageBundleId,\n\t\t\t\t\t\t\tlocale: variant.messageLocale,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.returningAll()\n\t\t\t\t\t\t.executeTakeFirstOrThrow();\n\t\t\t\t}\n\n\t\t\t\tconst existingVariants = await trx\n\t\t\t\t\t.selectFrom(\"variant\")\n\t\t\t\t\t.where(\"messageId\", \"=\", existingMessage.id)\n\t\t\t\t\t.selectAll()\n\t\t\t\t\t.execute();\n\n\t\t\t\tconst existingVariant = existingVariants.find(\n\t\t\t\t\t(v) => JSON.stringify(v.matches) === JSON.stringify(variant.matches)\n\t\t\t\t);\n\n\t\t\t\t// need to reset typescript's type narrowing\n\t\t\t\t(variant as VariantImport).id = existingVariant?.id;\n\t\t\t\t(variant as VariantImport).messageId = existingMessage.id;\n\t\t\t}\n\t\t\tconst toBeInsertedVariant: NewVariant = {\n\t\t\t\t...variant,\n\t\t\t\t// @ts-expect-error - bundle id is provided by VariantImport but not needed when inserting\n\t\t\t\tmessageBundleId: undefined,\n\t\t\t\tmessageLocale: undefined,\n\t\t\t};\n\t\t\tawait trx\n\t\t\t\t.insertInto(\"variant\")\n\t\t\t\t.values(toBeInsertedVariant)\n\t\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(toBeInsertedVariant))\n\t\t\t\t.execute();\n\t\t}\n\t});\n}\n"]}