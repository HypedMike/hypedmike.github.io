{"version":3,"file":"upsertBundleNestedMatchByProperties.js","sourceRoot":"/","sources":["import-export/upsertBundleNestedMatchByProperties.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,MAAM,mCAAmC,GAAG,KAAK,EACvD,EAAgC,EAChC,MAAuB,EACP,EAAE;IAClB,IAAI,MAAM,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC3D,CAAC;IACD,MAAM,cAAc,GAAG,EAAE,GAAG,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;IAE1D,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC5C,MAAM,cAAc,GAAG,MAAM,GAAG;aAC9B,UAAU,CAAC,QAAQ,CAAC;aACpB,MAAM,CAAC,cAAc,CAAC;aACtB,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;aAC/D,SAAS,CAAC,IAAI,CAAC;aACf,uBAAuB,EAAE,CAAC;QAE5B,MAAM,gBAAgB,GAAG,MAAM,GAAG;aAChC,UAAU,CAAC,SAAS,CAAC;aACrB,KAAK,CAAC,UAAU,EAAE,GAAG,EAAE,cAAc,CAAC,EAAE,CAAC;aACzC,SAAS,EAAE;aACX,OAAO,EAAE,CAAC;QAEZ,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACvC,kBAAkB;YAClB,MAAM,eAAe,GAAG,gBAAgB,CAAC,IAAI,CAC5C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,CAClC,CAAC;YAEF,MAAM,eAAe,GAAG;gBACvB,GAAG,OAAO;gBACV,EAAE,EAAE,eAAe,EAAE,EAAE;gBACvB,QAAQ,EAAE,cAAc,CAAC,EAAE;gBAC3B,QAAQ,EAAE,SAAS;aACnB,CAAC;YACF,MAAM,eAAe,GAAG,MAAM,GAAG;iBAC/B,UAAU,CAAC,SAAS,CAAC;iBACrB,MAAM,CAAC,eAAe,CAAC;iBACvB,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;iBAChE,SAAS,CAAC,IAAI,CAAC;iBACf,uBAAuB,EAAE,CAAC;YAE5B,MAAM,gBAAgB,GAAG,MAAM,GAAG;iBAChC,UAAU,CAAC,SAAS,CAAC;iBACrB,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE,CAAC;iBAC3C,SAAS,EAAE;iBACX,OAAO,EAAE,CAAC;YAEZ,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACxC,mBAAmB;gBACnB,MAAM,eAAe,GAAG,gBAAgB,CAAC,IAAI,CAC5C,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CACpE,CAAC;gBAEF,MAAM,eAAe,GAAG;oBACvB,GAAG,OAAO;oBACV,EAAE,EAAE,eAAe,EAAE,EAAE;oBACvB,SAAS,EAAE,eAAe,CAAC,EAAE;iBAC7B,CAAC;gBACF,MAAM,GAAG;qBACP,UAAU,CAAC,SAAS,CAAC;qBACrB,MAAM,CAAC,eAAe,CAAC;qBACvB,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;qBAChE,OAAO,EAAE,CAAC;YACb,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Kysely } from \"kysely\";\nimport type {\n\tInlangDatabaseSchema,\n\tNewBundleNested,\n} from \"../database/schema.js\";\n\nexport const upsertBundleNestedMatchByProperties = async (\n\tdb: Kysely<InlangDatabaseSchema>,\n\tbundle: NewBundleNested\n): Promise<void> => {\n\tif (bundle.id === undefined) {\n\t\tthrow new Error(\"upsert expets a bundle id for matching\");\n\t}\n\tconst bundleToInsert = { ...bundle, messages: undefined };\n\n\tawait db.transaction().execute(async (trx) => {\n\t\tconst insertedBundle = await trx\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values(bundleToInsert)\n\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(bundleToInsert))\n\t\t\t.returning(\"id\")\n\t\t\t.executeTakeFirstOrThrow();\n\n\t\tconst existingMessages = await trx\n\t\t\t.selectFrom(\"message\")\n\t\t\t.where(\"bundleId\", \"=\", insertedBundle.id)\n\t\t\t.selectAll()\n\t\t\t.execute();\n\n\t\tfor (const message of bundle.messages) {\n\t\t\t// match by locale\n\t\t\tconst existingMessage = existingMessages.find(\n\t\t\t\t(m) => m.locale === message.locale\n\t\t\t);\n\n\t\t\tconst messageToInsert = {\n\t\t\t\t...message,\n\t\t\t\tid: existingMessage?.id,\n\t\t\t\tbundleId: insertedBundle.id,\n\t\t\t\tvariants: undefined,\n\t\t\t};\n\t\t\tconst insertedMessage = await trx\n\t\t\t\t.insertInto(\"message\")\n\t\t\t\t.values(messageToInsert)\n\t\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(messageToInsert))\n\t\t\t\t.returning(\"id\")\n\t\t\t\t.executeTakeFirstOrThrow();\n\n\t\t\tconst existingVariants = await trx\n\t\t\t\t.selectFrom(\"variant\")\n\t\t\t\t.where(\"messageId\", \"=\", insertedMessage.id)\n\t\t\t\t.selectAll()\n\t\t\t\t.execute();\n\n\t\t\tfor (const variant of message.variants) {\n\t\t\t\t// match by matches\n\t\t\t\tconst existingVariant = existingVariants.find(\n\t\t\t\t\t(v) => JSON.stringify(v.matches) === JSON.stringify(variant.matches)\n\t\t\t\t);\n\n\t\t\t\tconst variantToInsert = {\n\t\t\t\t\t...variant,\n\t\t\t\t\tid: existingVariant?.id,\n\t\t\t\t\tmessageId: insertedMessage.id,\n\t\t\t\t};\n\t\t\t\tawait trx\n\t\t\t\t\t.insertInto(\"variant\")\n\t\t\t\t\t.values(variantToInsert)\n\t\t\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(variantToInsert))\n\t\t\t\t\t.execute();\n\t\t\t}\n\t\t}\n\t});\n};\n"]}