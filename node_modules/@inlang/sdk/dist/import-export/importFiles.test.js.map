{"version":3,"file":"importFiles.test.js","sourceRoot":"/","sources":["import-export/importFiles.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AAGtD,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;IACzE,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAExE,MAAM,UAAU,GAAiB;QAChC,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;YACzB,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC;YAChC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;YACnE,QAAQ,EAAE,EAAE;SACZ,CAAC;KACF,CAAC;IAEF,MAAM,WAAW,CAAC;QACjB,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtD,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,QAAQ,EAAE,EAAS;KACnB,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;IAChF,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAExE,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9E,MAAM,OAAO,CAAC,EAAE;SACd,UAAU,CAAC,SAAS,CAAC;SACrB,MAAM,CAAC;QACP,EAAE,EAAE,QAAQ;QACZ,QAAQ,EAAE,aAAa;QACvB,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,EAAE;KACb,CAAC;SACD,OAAO,EAAE,CAAC;IAEZ,MAAM,UAAU,GAAiB;QAChC,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;YACzB,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE;gBACT;oBACC,QAAQ,EAAE,aAAa;oBACvB,MAAM,EAAE,IAAI;oBACZ,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;iBAC7D;aACD;YACD,QAAQ,EAAE,EAAE;SACZ,CAAC;KACF,CAAC;IAEF,MAAM,WAAW,CAAC;QACjB,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtD,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,QAAQ,EAAE,EAAS;KACnB,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,aAAa,CAAC;QAC5C,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,UAAU,EAAE;KAChD,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gIAAgI,EAAE,KAAK,IAAI,EAAE;IACjJ,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAExE,MAAM,UAAU,GAAiB;QAChC,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;YACzB,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,qBAAqB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;YAC7D,QAAQ,EAAE,EAAE;SACZ,CAAC;KACF,CAAC;IAEF,MAAM,WAAW,CAAC;QACjB,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtD,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,QAAQ,EAAE,EAAS;KACnB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE5E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;IACzE,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAExE,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9E,MAAM,OAAO,CAAC,EAAE;SACd,UAAU,CAAC,SAAS,CAAC;SACrB,MAAM,CAAC;QACP,EAAE,EAAE,cAAc;QAClB,QAAQ,EAAE,aAAa;QACvB,MAAM,EAAE,IAAI;KACZ,CAAC;SACD,OAAO,EAAE,CAAC;IAEZ,MAAM,UAAU,GAAiB;QAChC,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;YACzB,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;SAC9D,CAAC;KACF,CAAC;IAEF,MAAM,WAAW,CAAC;QACjB,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtD,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,QAAQ,EAAE,EAAS;KACnB,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;IAChF,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAExE,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9E,MAAM,OAAO,CAAC,EAAE;SACd,UAAU,CAAC,SAAS,CAAC;SACrB,MAAM,CAAC;QACP,EAAE,EAAE,cAAc;QAClB,QAAQ,EAAE,aAAa;QACvB,MAAM,EAAE,IAAI;KACZ,CAAC;SACD,OAAO,EAAE,CAAC;IAEZ,MAAM,UAAU,GAAiB;QAChC,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;YACzB,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,CAAC,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;SACnE,CAAC;KACF,CAAC;IAEF,MAAM,WAAW,CAAC;QACjB,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtD,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,QAAQ,EAAE,EAAS;KACnB,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,kIAAkI,EAAE,KAAK,IAAI,EAAE;IACnJ,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAExE,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,UAAU,GAAiB;QAChC,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;YACzB,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,CAAC,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;SACnE,CAAC;KACF,CAAC;IAEF,MAAM,WAAW,CAAC;QACjB,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtD,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,QAAQ,EAAE,EAAS;KACnB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAC5E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAC9E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAClD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC","sourcesContent":["import { test, expect } from \"vitest\";\nimport { importFiles } from \"./importFiles.js\";\nimport { loadProjectInMemory } from \"../project/loadProjectInMemory.js\";\nimport { newProject } from \"../project/newProject.js\";\nimport type { InlangPlugin } from \"../plugin/schema.js\";\n\ntest(\"it should insert a message as is if the id is provided\", async () => {\n\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\tconst mockPlugin: InlangPlugin = {\n\t\tkey: \"mock\",\n\t\timportFiles: async () => ({\n\t\t\tbundles: [{ id: \"mock-bundle\" }],\n\t\t\tmessages: [{ id: \"alfa23\", bundleId: \"mock-bundle\", locale: \"en\" }],\n\t\t\tvariants: [],\n\t\t}),\n\t};\n\n\tawait importFiles({\n\t\tdb: project.db,\n\t\tfiles: [{ content: new Uint8Array(), locale: \"mock\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPlugin],\n\t\tsettings: {} as any,\n\t});\n\n\tconst messages = await project.db.selectFrom(\"message\").selectAll().execute();\n\n\texpect(messages.length).toBe(1);\n\texpect(messages[0]?.id).toBe(\"alfa23\");\n});\n\ntest(\"it should match an existing message if the id is not provided\", async () => {\n\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\tawait project.db.insertInto(\"bundle\").values({ id: \"mock-bundle\" }).execute();\n\tawait project.db\n\t\t.insertInto(\"message\")\n\t\t.values({\n\t\t\tid: \"alfa23\",\n\t\t\tbundleId: \"mock-bundle\",\n\t\t\tlocale: \"en\",\n\t\t\tselectors: [],\n\t\t})\n\t\t.execute();\n\n\tconst mockPlugin: InlangPlugin = {\n\t\tkey: \"mock\",\n\t\timportFiles: async () => ({\n\t\t\tbundles: [],\n\t\t\tmessages: [\n\t\t\t\t{\n\t\t\t\t\tbundleId: \"mock-bundle\",\n\t\t\t\t\tlocale: \"en\",\n\t\t\t\t\tselectors: [{ type: \"variable-reference\", name: \"platform\" }],\n\t\t\t\t},\n\t\t\t],\n\t\t\tvariants: [],\n\t\t}),\n\t};\n\n\tawait importFiles({\n\t\tdb: project.db,\n\t\tfiles: [{ content: new Uint8Array(), locale: \"mock\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPlugin],\n\t\tsettings: {} as any,\n\t});\n\n\tconst messages = await project.db.selectFrom(\"message\").selectAll().execute();\n\n\texpect(messages.length).toBe(1);\n\texpect(messages[0]?.id).toBe(\"alfa23\");\n\texpect(messages[0]?.selectors).toStrictEqual([\n\t\t{ type: \"variable-reference\", name: \"platform\" },\n\t]);\n});\n\ntest(\"it should create a bundle for a message if the bundle does not exist to avoid foreign key conflicts and enable partial imports\", async () => {\n\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\tconst mockPlugin: InlangPlugin = {\n\t\tkey: \"mock\",\n\t\timportFiles: async () => ({\n\t\t\tbundles: [],\n\t\t\tmessages: [{ bundleId: \"non-existent-bundle\", locale: \"en\" }],\n\t\t\tvariants: [],\n\t\t}),\n\t};\n\n\tawait importFiles({\n\t\tdb: project.db,\n\t\tfiles: [{ content: new Uint8Array(), locale: \"mock\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPlugin],\n\t\tsettings: {} as any,\n\t});\n\n\tconst bundles = await project.db.selectFrom(\"bundle\").selectAll().execute();\n\n\texpect(bundles.length).toBe(1);\n\texpect(bundles[0]?.id).toBe(\"non-existent-bundle\");\n});\n\ntest(\"it should insert a variant as is if the id is provided\", async () => {\n\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\tawait project.db.insertInto(\"bundle\").values({ id: \"mock-bundle\" }).execute();\n\tawait project.db\n\t\t.insertInto(\"message\")\n\t\t.values({\n\t\t\tid: \"mock-message\",\n\t\t\tbundleId: \"mock-bundle\",\n\t\t\tlocale: \"en\",\n\t\t})\n\t\t.execute();\n\n\tconst mockPlugin: InlangPlugin = {\n\t\tkey: \"mock\",\n\t\timportFiles: async () => ({\n\t\t\tbundles: [],\n\t\t\tmessages: [],\n\t\t\tvariants: [{ id: \"variant-id-23\", messageId: \"mock-message\" }],\n\t\t}),\n\t};\n\n\tawait importFiles({\n\t\tdb: project.db,\n\t\tfiles: [{ content: new Uint8Array(), locale: \"mock\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPlugin],\n\t\tsettings: {} as any,\n\t});\n\n\tconst variants = await project.db.selectFrom(\"variant\").selectAll().execute();\n\n\texpect(variants.length).toBe(1);\n\texpect(variants[0]?.id).toBe(\"variant-id-23\");\n});\n\ntest(\"it should match an existing variant if the id is not provided\", async () => {\n\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\tawait project.db.insertInto(\"bundle\").values({ id: \"mock-bundle\" }).execute();\n\tawait project.db\n\t\t.insertInto(\"message\")\n\t\t.values({\n\t\t\tid: \"mock-message\",\n\t\t\tbundleId: \"mock-bundle\",\n\t\t\tlocale: \"en\",\n\t\t})\n\t\t.execute();\n\n\tconst mockPlugin: InlangPlugin = {\n\t\tkey: \"mock\",\n\t\timportFiles: async () => ({\n\t\t\tbundles: [],\n\t\t\tmessages: [],\n\t\t\tvariants: [{ messageBundleId: \"mock-bundle\", messageLocale: \"en\" }],\n\t\t}),\n\t};\n\n\tawait importFiles({\n\t\tdb: project.db,\n\t\tfiles: [{ content: new Uint8Array(), locale: \"mock\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPlugin],\n\t\tsettings: {} as any,\n\t});\n\n\tconst variants = await project.db.selectFrom(\"variant\").selectAll().execute();\n\n\texpect(variants.length).toBe(1);\n\texpect(variants[0]?.messageId).toBe(\"mock-message\");\n\texpect(variants[0]?.id).toBeDefined();\n});\n\ntest(\"it should create a message for a variant if the message does not exist to avoid foreign key conflicts and enable partial imports\", async () => {\n\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\tawait project.db.insertInto(\"bundle\").values({ id: \"mock-bundle\" }).execute();\n\n\tconst mockPlugin: InlangPlugin = {\n\t\tkey: \"mock\",\n\t\timportFiles: async () => ({\n\t\t\tbundles: [],\n\t\t\tmessages: [],\n\t\t\tvariants: [{ messageBundleId: \"mock-bundle\", messageLocale: \"en\" }],\n\t\t}),\n\t};\n\n\tawait importFiles({\n\t\tdb: project.db,\n\t\tfiles: [{ content: new Uint8Array(), locale: \"mock\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPlugin],\n\t\tsettings: {} as any,\n\t});\n\n\tconst bundles = await project.db.selectFrom(\"bundle\").selectAll().execute();\n\tconst messages = await project.db.selectFrom(\"message\").selectAll().execute();\n\tconst variants = await project.db.selectFrom(\"variant\").selectAll().execute();\n\n\texpect(bundles.length).toBe(1);\n\texpect(messages.length).toBe(1);\n\texpect(variants.length).toBe(1);\n\n\texpect(messages[0]?.bundleId).toBe(\"mock-bundle\");\n\texpect(messages[0]?.locale).toBe(\"en\");\n\texpect(variants[0]?.messageId).toBe(messages[0]?.id);\n});\n"]}