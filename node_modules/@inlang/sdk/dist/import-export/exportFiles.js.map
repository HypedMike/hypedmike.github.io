{"version":3,"file":"exportFiles.js","sourceRoot":"/","sources":["import-export/exportFiles.ts"],"names":[],"mappings":"AACA,OAAO,EACN,mCAAmC,EACnC,kBAAkB,GAClB,MAAM,qBAAqB,CAAC;AAK7B,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,IAKjC;IACA,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,kBAAkB,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACtE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACzB,MAAM,IAAI,mCAAmC,CAAC;YAC7C,MAAM,EAAE,IAAI,CAAC,SAAS;YACtB,QAAQ,EAAE,aAAa;SACvB,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IACzE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAC3E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAE3E,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC;QACtC,QAAQ,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC;QACxC,OAAO;QACP,QAAQ;QACR,QAAQ;KACR,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;AACd,CAAC","sourcesContent":["import type { Kysely } from \"kysely\";\nimport {\n\tPluginDoesNotImplementFunctionError,\n\tPluginMissingError,\n} from \"../plugin/errors.js\";\nimport type { ProjectSettings } from \"../json-schema/settings.js\";\nimport type { InlangDatabaseSchema } from \"../database/schema.js\";\nimport type { InlangPlugin } from \"../plugin/schema.js\";\n\nexport async function exportFiles(opts: {\n\treadonly pluginKey: string;\n\treadonly settings: ProjectSettings;\n\treadonly plugins: readonly InlangPlugin[];\n\treadonly db: Kysely<InlangDatabaseSchema>;\n}) {\n\tconst plugin = opts.plugins.find((p) => p.key === opts.pluginKey);\n\tif (!plugin) throw new PluginMissingError({ plugin: opts.pluginKey });\n\tif (!plugin.exportFiles) {\n\t\tthrow new PluginDoesNotImplementFunctionError({\n\t\t\tplugin: opts.pluginKey,\n\t\t\tfunction: \"exportFiles\",\n\t\t});\n\t}\n\n\tconst bundles = await opts.db.selectFrom(\"bundle\").selectAll().execute();\n\tconst messages = await opts.db.selectFrom(\"message\").selectAll().execute();\n\tconst variants = await opts.db.selectFrom(\"variant\").selectAll().execute();\n\n\tconst files = await plugin.exportFiles({\n\t\tsettings: structuredClone(opts.settings),\n\t\tbundles,\n\t\tmessages,\n\t\tvariants,\n\t});\n\treturn files;\n}\n"]}