{"version":3,"file":"roundtrip.test.js","sourceRoot":"/","sources":["import-export/roundtrip.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect } from \"vitest\";\nimport type {\n\tBundleImport,\n\tInlangPlugin,\n\tMessageImport,\n\tVariantImport,\n} from \"../plugin/schema.js\";\nimport type { Message } from \"../database/schema.js\";\nimport type { Text } from \"../json-schema/pattern.js\";\nimport { loadProjectInMemory } from \"../project/loadProjectInMemory.js\";\nimport { newProject } from \"../project/newProject.js\";\nimport { importFiles } from \"./importFiles.js\";\nimport { exportFiles } from \"./exportFiles.js\";\n\ntest(\"the file should be identical after a roundtrip if no modifications occured\", async () => {\n\tconst project = await loadProjectInMemory({\n\t\tblob: await newProject(),\n\t});\n\n\tconst enResource = JSON.stringify({\n\t\thello_world: \"value1\",\n\t});\n\n\tawait importFiles({\n\t\tfiles: [{ content: new TextEncoder().encode(enResource), locale: \"en\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPluginSimple],\n\t\tsettings: await project.settings.get(),\n\t\tdb: project.db,\n\t});\n\n\tconst importedBundles = await project.db\n\t\t.selectFrom(\"bundle\")\n\t\t.selectAll()\n\t\t.execute();\n\tconst importedMessages = await project.db\n\t\t.selectFrom(\"message\")\n\t\t.selectAll()\n\t\t.execute();\n\tconst importedVariants = await project.db\n\t\t.selectFrom(\"variant\")\n\t\t.selectAll()\n\t\t.execute();\n\n\texpect(importedBundles.length).toBe(1);\n\texpect(importedMessages.length).toBe(1);\n\texpect(importedVariants.length).toBe(1);\n\texpect(importedBundles[0]?.id).toBe(\"hello_world\");\n\texpect(importedMessages[0]?.bundleId).toBe(\"hello_world\");\n\texpect(importedVariants[0]?.messageId).toBe(importedMessages[0]?.id);\n\n\tconst exportedFiles = await exportFiles({\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPluginSimple],\n\t\tsettings: await project.settings.get(),\n\t\tdb: project.db,\n\t});\n\n\texpect(exportedFiles.length).toBe(1);\n\texpect(exportedFiles[0]?.name).toBe(\"en.json\");\n\texpect(new TextDecoder().decode(exportedFiles[0]?.content)).toBe(enResource);\n});\n\ntest(\"a variant with an existing match should update the existing variant and not create a new one to enable roundtrips\", async () => {\n\tconst project = await loadProjectInMemory({\n\t\tblob: await newProject(),\n\t});\n\n\tconst existing = {\n\t\tbundles: [\n\t\t\t{\n\t\t\t\tid: \"mock-bundle-id\",\n\t\t\t\tdeclarations: [],\n\t\t\t},\n\t\t],\n\t\tmessages: [\n\t\t\t{\n\t\t\t\tid: \"mock-message-id\",\n\t\t\t\tlocale: \"en\",\n\t\t\t\tselectors: [],\n\t\t\t\tbundleId: \"mock-bundle-id\",\n\t\t\t},\n\t\t],\n\t\tvariants: [\n\t\t\t{\n\t\t\t\tid: \"mock-variant-id\",\n\t\t\t\tmessageId: \"mock-message-id\",\n\t\t\t\tmatches: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"literal-match\",\n\t\t\t\t\t\tkey: \"color\",\n\t\t\t\t\t\tvalue: \"blue\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpattern: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\tvalue: \"You have blue eyes.\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tconst updated = structuredClone(existing);\n\t// @ts-expect-error - we know this is a text pattern\n\tupdated.variants[0].pattern[0].value = \"You have beautiful blue eyes.\";\n\n\tconst enResource = JSON.stringify(updated);\n\n\tawait importFiles({\n\t\tfiles: [{ content: new TextEncoder().encode(enResource), locale: \"en\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPluginAst],\n\t\tsettings: await project.settings.get(),\n\t\tdb: project.db,\n\t});\n\n\tconst bundles = await project.db.selectFrom(\"bundle\").selectAll().execute();\n\tconst messages = await project.db.selectFrom(\"message\").selectAll().execute();\n\tconst variants = await project.db.selectFrom(\"variant\").selectAll().execute();\n\n\texpect(bundles.length).toBe(1);\n\texpect(messages.length).toBe(1);\n\texpect(variants.length).toBe(1);\n\t// @ts-expect-error - we know this is a text pattern\n\texpect(variants[0]?.pattern[0].value).toBe(\"You have beautiful blue eyes.\");\n});\n\ntest(\"if a message for the bundle id and locale already exists, update it. don't create a new message\", async () => {\n\tconst project = await loadProjectInMemory({\n\t\tblob: await newProject(),\n\t});\n\n\tconst existing: any = {\n\t\tbundles: [{ id: \"mock-bundle-id\", declarations: [] }],\n\t\tmessages: [\n\t\t\t{\n\t\t\t\tid: \"mock-message-id\",\n\t\t\t\tlocale: \"en\",\n\t\t\t\tselectors: [],\n\t\t\t\tbundleId: \"mock-bundle-id\",\n\t\t\t},\n\t\t],\n\t\tvariants: [],\n\t};\n\n\tconst updated = structuredClone(existing);\n\tupdated.messages[0]!.selectors = [\n\t\t{\n\t\t\ttype: \"variable-reference\",\n\t\t\tname: \"variable2\",\n\t\t},\n\t] satisfies Message[\"selectors\"];\n\n\tconst enResource = new TextEncoder().encode(JSON.stringify(updated));\n\n\tawait importFiles({\n\t\tfiles: [{ content: enResource, locale: \"en\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPluginAst],\n\t\tsettings: await project.settings.get(),\n\t\tdb: project.db,\n\t});\n\n\tconst bundles = await project.db.selectFrom(\"bundle\").selectAll().execute();\n\tconst messages = await project.db.selectFrom(\"message\").selectAll().execute();\n\n\texpect(bundles.length).toBe(1);\n\texpect(messages.length).toBe(1);\n\n\texpect(messages[0]?.selectors).toStrictEqual([\n\t\t{\n\t\t\ttype: \"variable-reference\",\n\t\t\tname: \"variable2\",\n\t\t},\n\t]);\n});\n\ntest(\"keys should be ordered alphabetically for .json to minimize git diffs\", async () => {\n\tconst project = await loadProjectInMemory({\n\t\tblob: await newProject(),\n\t});\n\n\tconst enResource = JSON.stringify({\n\t\ta: \"value1\",\n\t\tb: \"value2\",\n\t\td: \"value4\",\n\t});\n\n\tawait importFiles({\n\t\tfiles: [{ content: new TextEncoder().encode(enResource), locale: \"en\" }],\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPluginSimple],\n\t\tsettings: await project.settings.get(),\n\t\tdb: project.db,\n\t});\n\n\tawait project.db.insertInto(\"bundle\").values({ id: \"c\" }).execute();\n\tawait project.db\n\t\t.insertInto(\"message\")\n\t\t.values({ id: \"c-en\", bundleId: \"c\", locale: \"en\" })\n\t\t.execute();\n\tawait project.db\n\t\t.insertInto(\"variant\")\n\t\t.values({ messageId: \"c-en\", pattern: [{ type: \"text\", value: \"value3\" }] })\n\t\t.execute();\n\n\tconst exportedFiles = await exportFiles({\n\t\tpluginKey: \"mock\",\n\t\tplugins: [mockPluginSimple],\n\t\tsettings: await project.settings.get(),\n\t\tdb: project.db,\n\t});\n\n\texpect(\n\t\tJSON.parse(new TextDecoder().decode(exportedFiles[0]?.content))\n\t).toStrictEqual({\n\t\ta: \"value1\",\n\t\tb: \"value2\",\n\t\tc: \"value3\",\n\t\td: \"value4\",\n\t});\n});\n\nconst mockPluginAst: InlangPlugin = {\n\tkey: \"mock\",\n\texportFiles: async ({ bundles, messages, variants }) => {\n\t\treturn [\n\t\t\t{\n\t\t\t\tlocale: \"every\",\n\t\t\t\tname: \"x.json\",\n\t\t\t\tcontent: new TextEncoder().encode(\n\t\t\t\t\tJSON.stringify({ bundles, messages, variants })\n\t\t\t\t),\n\t\t\t},\n\t\t];\n\t},\n\timportFiles: async ({ files }) => {\n\t\tlet bundles: any[] = [];\n\t\tlet messages: any[] = [];\n\t\tlet variants: any[] = [];\n\t\tfor (const file of files) {\n\t\t\tconst parsed = JSON.parse(new TextDecoder().decode(file.content));\n\t\t\tbundles = [...bundles, ...parsed.bundles];\n\t\t\tmessages = [...messages, ...parsed.messages];\n\t\t\tvariants = [...variants, ...parsed.variants];\n\t\t}\n\t\treturn { bundles, messages, variants };\n\t},\n};\n\n// a simple mock plugin to test roundtrips\n//\n// purposefully not imported a real plugin\n// to keep the interdepenedencies low and\n// increase maintainability\nconst mockPluginSimple: InlangPlugin = {\n\tkey: \"mock\",\n\texportFiles: async ({ messages, variants }) => {\n\t\tconst jsons: any = {};\n\t\tfor (const message of messages) {\n\t\t\tconst key = message.bundleId;\n\t\t\tconst value = (\n\t\t\t\tvariants.find((v) => v.messageId === message.id)?.pattern[0] as Text\n\t\t\t).value;\n\t\t\tif (!jsons[message.locale]) {\n\t\t\t\tjsons[message.locale] = {};\n\t\t\t}\n\t\t\tjsons[message.locale][key] = value;\n\t\t}\n\t\treturn Object.entries(jsons).map(([locale, json]) => ({\n\t\t\tlocale,\n\t\t\tname: locale + \".json\",\n\t\t\tcontent: new TextEncoder().encode(JSON.stringify(json)),\n\t\t}));\n\t},\n\timportFiles: async ({ files }) => {\n\t\tconst bundles: BundleImport[] = [];\n\t\tconst messages: MessageImport[] = [];\n\t\tconst variants: VariantImport[] = [];\n\t\tfor (const file of files) {\n\t\t\tconst parsed = JSON.parse(new TextDecoder().decode(file.content));\n\t\t\tfor (const key in parsed) {\n\t\t\t\tbundles.push({\n\t\t\t\t\tid: key,\n\t\t\t\t\tdeclarations: [],\n\t\t\t\t});\n\t\t\t\tmessages.push({\n\t\t\t\t\tbundleId: key,\n\t\t\t\t\tlocale: file.locale,\n\t\t\t\t\tselectors: [],\n\t\t\t\t});\n\t\t\t\tvariants.push({\n\t\t\t\t\tmessageBundleId: key,\n\t\t\t\t\tmessageLocale: file.locale,\n\t\t\t\t\tmatches: [],\n\t\t\t\t\tpattern: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\tvalue: parsed[key],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tbundles,\n\t\t\tmessages,\n\t\t\tvariants,\n\t\t};\n\t},\n};\n"]}