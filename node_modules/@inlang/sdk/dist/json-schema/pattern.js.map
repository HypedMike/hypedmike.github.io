{"version":3,"file":"pattern.js","sourceRoot":"/","sources":["json-schema/pattern.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAe,MAAM,mBAAmB,CAAC;AAGtD,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5C,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;IACxC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE;CACnB,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;IAClC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;IAC7B,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;CACpB,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE;IACnB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;CAC/C,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5C,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;IACxC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE;IACnB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;CAC3B,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;IACrC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;IAChC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IAC7C,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;CAC5C,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;IAC/B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC1B,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;CACpB,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;IACxC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACpC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE;IACnB,KAAK,EAAE,UAAU;CACjB,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;IACxC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACpC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE;IACnB,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;CAC5C,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;AAGtE,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { Type, type Static } from \"@sinclair/typebox\";\n\nexport type VariableReference = Static<typeof VariableReference>;\nexport const VariableReference = Type.Object({\n\ttype: Type.Literal(\"variable-reference\"),\n\tname: Type.String(),\n});\n\nexport type Literal = Static<typeof Literal>;\nexport const Literal = Type.Object({\n\ttype: Type.Literal(\"literal\"),\n\tvalue: Type.String(),\n});\n\nexport type Option = Static<typeof Option>;\nexport const Option = Type.Object({\n\tname: Type.String(),\n\tvalue: Type.Union([Literal, VariableReference]),\n});\n\nexport type FunctionReference = Static<typeof FunctionReference>;\nexport const FunctionReference = Type.Object({\n\ttype: Type.Literal(\"function-reference\"),\n\tname: Type.String(),\n\toptions: Type.Array(Option),\n});\n\nexport type Expression = Static<typeof Expression>;\nexport const Expression = Type.Object({\n\ttype: Type.Literal(\"expression\"),\n\targ: Type.Union([VariableReference, Literal]),\n\tannotation: Type.Optional(FunctionReference),\n});\n\nexport type Text = Static<typeof Text>;\nexport const Text = Type.Object({\n\ttype: Type.Literal(\"text\"),\n\tvalue: Type.String(),\n});\n\nexport type LocalVariable = Static<typeof LocalVariable>;\nexport const LocalVariable = Type.Object({\n\ttype: Type.Literal(\"local-variable\"),\n\tname: Type.String(),\n\tvalue: Expression,\n});\n\nexport type InputVariable = Static<typeof InputVariable>;\nexport const InputVariable = Type.Object({\n\ttype: Type.Literal(\"input-variable\"),\n\tname: Type.String(),\n\tannotation: Type.Optional(FunctionReference),\n});\n\nexport type Declaration = Static<typeof Declaration>;\nexport const Declaration = Type.Union([InputVariable, LocalVariable]);\n\nexport type Pattern = Static<typeof Pattern>;\nexport const Pattern = Type.Array(Type.Union([Text, Expression]));\n"]}