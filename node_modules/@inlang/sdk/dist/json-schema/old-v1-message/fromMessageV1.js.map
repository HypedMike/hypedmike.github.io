{"version":3,"file":"fromMessageV1.js","sourceRoot":"/","sources":["json-schema/old-v1-message/fromMessageV1.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tBundleNested,\n\tMessageNested,\n\tVariant,\n} from \"../../database/schema.js\";\nimport type { Declaration, Pattern } from \"../pattern.js\";\nimport type { MessageV1, PatternV1 } from \"./schemaV1.js\";\n\n/**\n * Converts a MessageV1 into a BundleNested\n *\n * @throws If the message cannot be represented in the v1 format\n */\nexport function fromMessageV1(messageV1: MessageV1): BundleNested {\n\tconst bundleId = messageV1.id;\n\n\tconst languages = [\n\t\t...new Set(messageV1.variants.map((variant) => variant.languageTag)),\n\t];\n\n\tconst declarations = new Set<Declaration>();\n\n\tconst messages: MessageNested[] = languages.map((language): MessageNested => {\n\t\tconst messageId = bundleId + \"_\" + language;\n\t\t//All variants that will be part of this message\n\t\tconst v1Variants = messageV1.variants.filter(\n\t\t\t(variant) => variant.languageTag === language\n\t\t);\n\n\t\t//find all selector names\n\t\tconst selectorNames = new Set<string>();\n\t\tfor (const v1Selector of messageV1.selectors ?? []) {\n\t\t\tselectorNames.add(v1Selector.name);\n\t\t}\n\n\t\t//The set of variables that need to be defined - Certainly includes the selectors\n\t\tconst variableNames = new Set<string>(selectorNames);\n\t\tconst variants: Variant[] = [];\n\t\tlet variantIndex = 1;\n\t\tfor (const v1Variant of v1Variants) {\n\t\t\tfor (const element of v1Variant.pattern) {\n\t\t\t\tif (element.type === \"VariableReference\") {\n\t\t\t\t\tvariableNames.add(element.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvariants.push({\n\t\t\t\t// matching was not supported. no problem should arise\n\t\t\t\tmatches: [],\n\t\t\t\tpattern: fromPatternV1(v1Variant.pattern),\n\t\t\t\tid: messageId + \"_\" + variantIndex,\n\t\t\t\tmessageId: messageId,\n\t\t\t});\n\t\t\tvariantIndex += 1;\n\t\t}\n\n\t\t//Create an input declaration for each variable and selector we need\n\t\tfor (const variable of variableNames) {\n\t\t\tdeclarations.add({\n\t\t\t\ttype: \"input-variable\",\n\t\t\t\tname: variable,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tid: messageId,\n\t\t\tbundleId: bundleId,\n\t\t\tlocale: language,\n\t\t\tselectors: [],\n\t\t\tvariants,\n\t\t};\n\t});\n\n\treturn {\n\t\tid: bundleId,\n\t\tdeclarations: [...declarations],\n\t\tmessages,\n\t};\n}\nfunction fromPatternV1(pattern: PatternV1): Pattern {\n\treturn pattern.map((element) => {\n\t\tswitch (element.type) {\n\t\t\tcase \"Text\": {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"text\",\n\t\t\t\t\tvalue: element.value,\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"VariableReference\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"expression\",\n\t\t\t\t\targ: {\n\t\t\t\t\t\ttype: \"variable-reference\",\n\t\t\t\t\t\tname: element.name,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t}\n\t});\n}\n"]}