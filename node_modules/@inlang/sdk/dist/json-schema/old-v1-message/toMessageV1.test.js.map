{"version":3,"file":"toMessageV1.test.js","sourceRoot":"/","sources":["json-schema/old-v1-message/toMessageV1.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAG1C,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;IACxB,MAAM,OAAO,GAAY,WAAW,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEnD,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;AAEhD,MAAM,SAAS,GAAc;IAC5B,EAAE,EAAE,aAAa;IACjB,KAAK,EAAE,EAAE;IACT,QAAQ,EAAE;QACT;YACC,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,EAAE;YACT,OAAO,EAAE;gBACR;oBACC,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,cAAc;iBACrB;aACD;SACD;QACD;YACC,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,EAAE;YACT,OAAO,EAAE;gBACR;oBACC,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,aAAa;iBACpB;aACD;SACD;KACD;IACD,SAAS,EAAE,EAAE;CACb,CAAC;AAEF,MAAM,MAAM,GAAiB;IAC5B,EAAE,EAAE,aAAa;IACjB,YAAY,EAAE,EAAE;IAChB,QAAQ,EAAE;QACT;YACC,QAAQ,EAAE,aAAa;YACvB,EAAE,EAAE,aAAa,GAAG,KAAK;YACzB,MAAM,EAAE,IAAI;YACZ,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE;gBACT;oBACC,EAAE,EAAE,aAAa,GAAG,OAAO;oBAC3B,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE,aAAa,GAAG,KAAK;oBAChC,OAAO,EAAE;wBACR;4BACC,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,cAAc;yBACrB;qBACD;iBACD;aACD;SACD;QACD;YACC,QAAQ,EAAE,aAAa;YACvB,EAAE,EAAE,aAAa,GAAG,KAAK;YACzB,MAAM,EAAE,IAAI;YACZ,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE;gBACT;oBACC,EAAE,EAAE,aAAa,GAAG,OAAO;oBAC3B,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE,aAAa,GAAG,KAAK;oBAChC,OAAO,EAAE;wBACR;4BACC,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,aAAa;yBACpB;qBACD;iBACD;aACD;SACD;KACD;CACD,CAAC","sourcesContent":["import { test, expect } from \"vitest\";\nimport { toMessageV1 } from \"./toMessageV1.js\";\nimport { Value } from \"@sinclair/typebox/value\";\nimport { MessageV1 } from \"./schemaV1.js\";\nimport type { BundleNested } from \"../../database/schema.js\";\n\ntest(\"toMessageV1\", () => {\n\tconst message: unknown = toMessageV1(bundle);\n\texpect(Value.Check(MessageV1, message)).toBe(true);\n\n\texpect(message).toStrictEqual(messageV1);\n});\n\ntest.todo(\"with variable references\", () => {});\n\nconst messageV1: MessageV1 = {\n\tid: \"hello_world\",\n\talias: {},\n\tvariants: [\n\t\t{\n\t\t\tlanguageTag: \"en\",\n\t\t\tmatch: [],\n\t\t\tpattern: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"Text\",\n\t\t\t\t\tvalue: \"Hello World!\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlanguageTag: \"de\",\n\t\t\tmatch: [],\n\t\t\tpattern: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"Text\",\n\t\t\t\t\tvalue: \"Hallo Welt!\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n\tselectors: [],\n};\n\nconst bundle: BundleNested = {\n\tid: \"hello_world\",\n\tdeclarations: [],\n\tmessages: [\n\t\t{\n\t\t\tbundleId: \"hello_world\",\n\t\t\tid: \"hello_world\" + \"_en\",\n\t\t\tlocale: \"en\",\n\t\t\tselectors: [],\n\t\t\tvariants: [\n\t\t\t\t{\n\t\t\t\t\tid: \"hello_world\" + \"_en_1\",\n\t\t\t\t\tmatches: [],\n\t\t\t\t\tmessageId: \"hello_world\" + \"_en\",\n\t\t\t\t\tpattern: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\tvalue: \"Hello World!\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tbundleId: \"hello_world\",\n\t\t\tid: \"hello_world\" + \"_de\",\n\t\t\tlocale: \"de\",\n\t\t\tselectors: [],\n\t\t\tvariants: [\n\t\t\t\t{\n\t\t\t\t\tid: \"hello_world\" + \"_de_1\",\n\t\t\t\t\tmatches: [],\n\t\t\t\t\tmessageId: \"hello_world\" + \"_de\",\n\t\t\t\t\tpattern: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\tvalue: \"Hallo Welt!\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n"]}