{"version":3,"file":"helper.js","sourceRoot":"/","sources":["helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AASjD;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,YAAY,CAAC,IAG5B;IACA,OAAO;QACN,EAAE,EAAE,IAAI,CAAC,EAAE,IAAI,OAAO,EAAE;QACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ;KACvB,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAU,aAAa,CAAC,IAK7B;IACA,MAAM,SAAS,GAAG,IAAI,EAAE,CAAC;IACzB,OAAO;QACN,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,EAAE,EAAE,SAAS;QACb,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,SAAS,EAAE,EAAE;QACb,QAAQ,EAAE;YACT,aAAa,CAAC;gBACb,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,OAAO,EAAE,IAAI,CAAC,OAAO;aACrB,CAAC;SACF;KACD,CAAC;AACH,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,aAAa,CAAC,IAM7B;IACA,OAAO;QACN,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;QAC9B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACzC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;KACvE,CAAC;AACH,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAY;IACzC,OAAO;QACN,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,IAAI;KACX,CAAC;AACH,CAAC","sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport type { ProjectSettings } from \"./json-schema/settings.js\";\nimport { humanId } from \"./human-id/human-id.js\";\nimport type {\n\tMatch,\n\tNewBundleNested,\n\tNewMessageNested,\n\tVariant,\n} from \"./database/schema.js\";\nimport type { Text } from \"./json-schema/pattern.js\";\n\n/**\n * create v2 Bundle with a random human ID\n *\n * @deprecated\n *\n * use the database directly\n *\n * - less code because the database has default values\n * - `createMessage` is misleading because it does not treat expressions in the text\n *\n * @example createBundle({\n *   messages: [\n * \t\t createMessage({locale: \"en\", text: \"Hello world!\"})\n * \t\t createMessage({locale: \"de\", text: \"Hallo Welt!\"})\n *   ]\n * })\n */\nexport function createBundle(args: {\n\tid?: string;\n\tmessages: NewMessageNested[];\n}): NewBundleNested {\n\treturn {\n\t\tid: args.id ?? humanId(),\n\t\tmessages: args.messages,\n\t};\n}\n\n/**\n *\n * @deprecated\n * use the database directly\n *\n * - text will always be a string, no matter\n *   if an expression is provided like hello \"{username}\"\n * - the database has default values\n *\n * ```\n * await project.db.insertInto(\"message\").values({\n * \t\tbundleId: \"bundleId\",\n *    pattern: []\n * \t\t...\n * })\n * ```\n *\n * create v2 Messsage AST with a randomId, and text-only pattern\n * @example createMessage({locale: \"en\", text: \"Hello world\"})\n */\nexport function createMessage(args: {\n\tbundleId: string;\n\tlocale: ProjectSettings[\"locales\"][number];\n\ttext: string;\n\tmatches?: Match[];\n}): NewMessageNested {\n\tconst messageId = uuid();\n\treturn {\n\t\tbundleId: args.bundleId,\n\t\tid: messageId,\n\t\tlocale: args.locale,\n\t\tselectors: [],\n\t\tvariants: [\n\t\t\tcreateVariant({\n\t\t\t\tmessageId: messageId,\n\t\t\t\ttext: args.text,\n\t\t\t\tmatches: args.matches,\n\t\t\t}),\n\t\t],\n\t};\n}\n\n/**\n *\n * @deprecated\n *\n * use the database directly\n *\n * - less code because the database has default values\n * - `text` is misleading because it does not treat expressions in the text\n *\n * create v2 Variant AST with text-only pattern\n * @example createVariant({match: [\"*\"], text: \"Hello world\"})\n */\nexport function createVariant(args: {\n\tmessageId: string;\n\tid?: string;\n\ttext?: string;\n\tmatches?: Match[];\n\tpattern?: Variant[\"pattern\"];\n}): Variant {\n\treturn {\n\t\tmessageId: args.messageId,\n\t\tid: args.id ? args.id : uuid(),\n\t\tmatches: args.matches ? args.matches : [],\n\t\tpattern: args.pattern ? args.pattern : [toTextElement(args.text ?? \"\")],\n\t};\n}\n\nexport function toTextElement(text: string): Text {\n\treturn {\n\t\ttype: \"text\",\n\t\tvalue: text,\n\t};\n}\n"]}