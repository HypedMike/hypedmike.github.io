{"version":3,"file":"loadProjectInMemory.js","sourceRoot":"/","sources":["project/loadProjectInMemory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAoB,MAAM,aAAa,CAAC;AAChE,OAAO,EAAE,sBAAsB,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACxC,IAG6D;IAE7D,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC;QACjC,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,SAAS,EAAE,IAAI,CAAC,YAAY;QAC5B,cAAc,EAAE;QACf,oBAAoB;SACpB;KACD,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE;SACzB,UAAU,CAAC,MAAM,CAAC;SAClB,MAAM,CAAC,MAAM,CAAC;SACd,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,CAAC;SAChC,uBAAuB,EAAE,CAAC;IAE5B,MAAM,MAAM,GAAG,MAAM,sBAAsB,CAAC,EAAE,CAAC,CAAC;IAChD,cAAc,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAErE,OAAO,MAAM,WAAW,CAAC;QACxB,uCAAuC;QACvC,GAAG,IAAI;QACP,MAAM;QACN,GAAG;KACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { openLixInMemory, type NewKeyValue } from \"@lix-js/sdk\";\nimport { createInMemoryDatabase, importDatabase } from \"sqlite-wasm-kysely\";\nimport { loadProject } from \"./loadProject.js\";\n\n/**\n * Load a project from a blob in memory.\n */\nexport async function loadProjectInMemory(\n\targs: {\n\t\tblob: Blob;\n\t\tlixKeyValues?: NewKeyValue[];\n\t} & Omit<Parameters<typeof loadProject>[0], \"sqlite\" | \"lix\">\n) {\n\tconst lix = await openLixInMemory({\n\t\tblob: args.blob,\n\t\taccount: args.account,\n\t\tkeyValues: args.lixKeyValues,\n\t\tprovidePlugins: [\n\t\t\t// inlangLixPluginV1\n\t\t],\n\t});\n\n\tconst dbFile = await lix.db\n\t\t.selectFrom(\"file\")\n\t\t.select(\"data\")\n\t\t.where(\"path\", \"=\", \"/db.sqlite\")\n\t\t.executeTakeFirstOrThrow();\n\n\tconst sqlite = await createInMemoryDatabase({});\n\timportDatabase({ db: sqlite, content: new Uint8Array(dbFile.data) });\n\n\treturn await loadProject({\n\t\t// pass common arguments to loadProject\n\t\t...args,\n\t\tsqlite,\n\t\tlix,\n\t});\n}\n"]}