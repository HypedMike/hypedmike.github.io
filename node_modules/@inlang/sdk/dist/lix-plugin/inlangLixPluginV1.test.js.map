{"version":3,"file":"inlangLixPluginV1.test.js","sourceRoot":"/","sources":["lix-plugin/inlangLixPluginV1.test.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport { test, expect, describe } from \"vitest\";\nimport { inlangLixPluginV1 } from \"./inlangLixPluginV1.js\";\nimport { type DiffReport } from \"@lix-js/sdk\";\nimport { newProject } from \"../project/newProject.js\";\nimport { loadProjectInMemory } from \"../project/loadProjectInMemory.js\";\nimport { contentFromDatabase } from \"sqlite-wasm-kysely\";\nimport type { Variant } from \"../database/schema.js\";\n\ndescribe.skip(\"plugin.diff.file\", () => {\n\ttest(\"insert of bundle\", async () => {\n\t\tconst neuProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({\n\t\t\t\tid: \"1\",\n\t\t\t})\n\t\t\t.execute();\n\t\tconst path = \"/db.sqlite\";\n\t\tconst diffReports = await inlangLixPluginV1.diff.file!({\n\t\t\told: undefined,\n\t\t\tneu: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath,\n\t\t\t\tdata: contentFromDatabase(neuProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t});\n\t\texpect(diffReports).toEqual([\n\t\t\t{\n\t\t\t\ttype: \"bundle\",\n\t\t\t\toperation: \"create\",\n\t\t\t\told: undefined,\n\t\t\t\tneu: expect.objectContaining({ id: \"1\" }),\n\t\t\t} satisfies DiffReport,\n\t\t]);\n\t});\n\n\t// reanble with declarations\n\ttest.todo(\"update of bundle\", async () => {\n\t\tconst oldProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait oldProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\t\tconst neuProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\n\t\tconst diffReports = await inlangLixPluginV1.diff.file!({\n\t\t\told: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(oldProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t\tneu: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(neuProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t});\n\n\t\texpect(diffReports).toEqual([\n\t\t\t{\n\t\t\t\tmeta: {\n\t\t\t\t\tid: \"1\",\n\t\t\t\t},\n\t\t\t\ttype: \"bundle\",\n\t\t\t\toperation: \"update\",\n\t\t\t\told: { id: \"1\" },\n\t\t\t\tneu: { id: \"1\" },\n\t\t\t} satisfies DiffReport,\n\t\t]);\n\t});\n\n\ttest(\"insert of message\", async () => {\n\t\tconst neuProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({ id: \"unknown\" })\n\t\t\t.execute();\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"message\")\n\t\t\t.values({\n\t\t\t\tid: \"1\",\n\t\t\t\tbundleId: \"unknown\",\n\t\t\t\tlocale: \"en\",\n\t\t\t})\n\t\t\t.execute();\n\t\tconst diffReports = await inlangLixPluginV1.diff.file!({\n\t\t\told: undefined,\n\t\t\tneu: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(neuProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t});\n\t\texpect(diffReports).toEqual(\n\t\t\texpect.arrayContaining([\n\t\t\t\t{\n\t\t\t\t\ttype: \"message\",\n\t\t\t\t\toperation: \"create\",\n\t\t\t\t\told: undefined,\n\t\t\t\t\tneu: {\n\t\t\t\t\t\tid: \"1\",\n\t\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\t\tselectors: [],\n\t\t\t\t\t\tlocale: \"en\",\n\t\t\t\t\t},\n\t\t\t\t} satisfies DiffReport,\n\t\t\t])\n\t\t);\n\t});\n\n\ttest(\"update of message\", async () => {\n\t\tconst oldProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait oldProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({ id: \"unknown\" })\n\t\t\t.execute();\n\t\tawait oldProject.db\n\t\t\t.insertInto(\"message\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\tlocale: \"en\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\tlocale: \"en\",\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\t\tconst neuProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({ id: \"unknown\" })\n\t\t\t.execute();\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"message\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\tlocale: \"de\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\tlocale: \"en\",\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\t\tconst diffReports = await inlangLixPluginV1.diff.file!({\n\t\t\told: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(oldProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t\tneu: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(neuProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t});\n\t\texpect(diffReports).toEqual(\n\t\t\texpect.arrayContaining([\n\t\t\t\t{\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\tid: \"1\",\n\t\t\t\t\t},\n\t\t\t\t\ttype: \"message\",\n\t\t\t\t\toperation: \"update\",\n\t\t\t\t\told: {\n\t\t\t\t\t\tid: \"1\",\n\t\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\t\tselectors: [],\n\t\t\t\t\t\tlocale: \"en\",\n\t\t\t\t\t},\n\t\t\t\t\tneu: {\n\t\t\t\t\t\tid: \"1\",\n\t\t\t\t\t\tbundleId: \"unknown\",\n\t\t\t\t\t\tselectors: [],\n\t\t\t\t\t\tlocale: \"de\",\n\t\t\t\t\t},\n\t\t\t\t} satisfies DiffReport,\n\t\t\t])\n\t\t);\n\t});\n\ttest(\"insert of variant\", async () => {\n\t\tconst neuProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({ id: \"bundle1\" })\n\t\t\t.execute();\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"message\")\n\t\t\t.values({ id: \"1\", bundleId: \"bundle1\", locale: \"en\" })\n\t\t\t.execute();\n\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"variant\")\n\t\t\t.values({\n\t\t\t\tid: \"1\",\n\t\t\t\tmessageId: \"1\",\n\t\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t\t\tmatches: [],\n\t\t\t})\n\t\t\t.execute();\n\t\tconst diffReports = await inlangLixPluginV1.diff.file!({\n\t\t\told: undefined,\n\t\t\tneu: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(neuProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t});\n\t\texpect(diffReports).toEqual(\n\t\t\texpect.arrayContaining([\n\t\t\t\t{\n\t\t\t\t\ttype: \"variant\",\n\t\t\t\t\toperation: \"create\",\n\t\t\t\t\told: undefined,\n\t\t\t\t\tneu: {\n\t\t\t\t\t\tid: \"1\",\n\t\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t\t\t\t\tmatches: [],\n\t\t\t\t\t},\n\t\t\t\t} satisfies DiffReport,\n\t\t\t])\n\t\t);\n\t});\n\ttest(\"update of variant\", async () => {\n\t\tconst oldProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait oldProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({ id: \"bundle1\" })\n\t\t\t.execute();\n\t\tawait oldProject.db\n\t\t\t.insertInto(\"message\")\n\t\t\t.values({ id: \"1\", bundleId: \"bundle1\", locale: \"en\" })\n\t\t\t.execute();\n\t\tawait oldProject.db\n\t\t\t.insertInto(\"variant\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t\t\t\tmatches: [],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t\t\t\tmatches: [],\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\t\tconst neuProject = await loadProjectInMemory({ blob: await newProject() });\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({ id: \"bundle1\" })\n\t\t\t.execute();\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"message\")\n\t\t\t.values({ id: \"1\", bundleId: \"bundle1\", locale: \"en\" })\n\t\t\t.execute();\n\t\tawait neuProject.db\n\t\t\t.insertInto(\"variant\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world from Berlin\" }],\n\t\t\t\t\tmatches: [],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t\t\t\tmatches: [],\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\t\tconst diffReports = await inlangLixPluginV1.diff.file!({\n\t\t\told: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(oldProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t\tneu: {\n\t\t\t\tid: \"uuid\",\n\t\t\t\tpath: \"/db.sqlite\",\n\t\t\t\tdata: contentFromDatabase(neuProject._sqlite),\n\t\t\t\tmetadata: {},\n\t\t\t},\n\t\t});\n\t\texpect(diffReports).toEqual([\n\t\t\t{\n\t\t\t\tmeta: {\n\t\t\t\t\tid: \"1\",\n\t\t\t\t},\n\t\t\t\toperation: \"update\",\n\t\t\t\ttype: \"variant\",\n\t\t\t\told: {\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t\t\t\tmatches: [],\n\t\t\t\t},\n\t\t\t\tneu: {\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tmessageId: \"1\",\n\t\t\t\t\tpattern: [{ type: \"text\", value: \"hello world from Berlin\" }],\n\t\t\t\t\tmatches: [],\n\t\t\t\t},\n\t\t\t} satisfies DiffReport,\n\t\t]);\n\t});\n\n\t// https://github.com/opral/lix-sdk/issues/33\n\ttest(\"it should generate changes after the first change\", async () => {\n\t\tconst project = await loadProjectInMemory({ blob: await newProject() });\n\n\t\tconst initialChanges = await project.lix.db\n\t\t\t.selectFrom(\"change\")\n\t\t\t.selectAll()\n\t\t\t.execute();\n\t\texpect(initialChanges.length).toEqual(0);\n\n\t\tawait project.db\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({\n\t\t\t\tid: \"1\",\n\t\t\t})\n\t\t\t.execute();\n\n\t\t// FIXME: how to await inlang sdk persisting the inlang db to lix?\n\t\tawait new Promise((resolve) => setTimeout(resolve, 500));\n\n\t\tawait project.lix.settled();\n\n\t\tconst changes = await project.lix.db\n\t\t\t.selectFrom(\"change\")\n\t\t\t.selectAll()\n\t\t\t.execute();\n\n\t\texpect(changes.length).toBe(1);\n\t\texpect(changes[0]?.value?.id).toBe(\"1\");\n\t\texpect(changes[0]?.operation).toBe(\"create\");\n\t});\n});\n\ndescribe.skip(\"plugin.diff.variant\", () => {\n\ttest(\"old and neu are the same should not report a diff\", async () => {\n\t\tconst old: Variant = {\n\t\t\tid: \"1\",\n\t\t\tmatches: [],\n\t\t\tmessageId: \"5\",\n\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t};\n\t\tconst neu: Variant = {\n\t\t\tid: \"1\",\n\t\t\tmatches: [],\n\t\t\tmessageId: \"5\",\n\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t};\n\t\tconst diff = await inlangLixPluginV1.diff.variant({ old, neu });\n\t\texpect(diff).toEqual([]);\n\t});\n\n\ttest(\"old and neu are different should yield a diff report\", async () => {\n\t\tconst old: Variant = {\n\t\t\tid: \"1\",\n\t\t\tmatches: [],\n\t\t\tmessageId: \"5\",\n\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t};\n\t\tconst neu: Variant = {\n\t\t\tid: \"1\",\n\t\t\tmatches: [],\n\t\t\tmessageId: \"5\",\n\t\t\tpattern: [{ type: \"text\", value: \"hello world from Berlin\" }],\n\t\t};\n\t\tconst diff = await inlangLixPluginV1.diff.variant({ old, neu });\n\t\texpect(diff).toEqual([\n\t\t\t{\n\t\t\t\tmeta: { id: \"1\" },\n\t\t\t\toperation: \"update\",\n\t\t\t\ttype: \"variant\",\n\t\t\t\tneu,\n\t\t\t\told,\n\t\t\t} satisfies DiffReport,\n\t\t]);\n\t});\n\n\ttest(\"old is undefined and neu is defined should return a diff report for the new value\", async () => {\n\t\tconst old = undefined;\n\t\tconst neu: Variant = {\n\t\t\tid: \"1\",\n\t\t\tmatches: [],\n\t\t\tmessageId: \"5\",\n\t\t\tpattern: [{ type: \"text\", value: \"hello world\" }],\n\t\t};\n\t\tconst diff = await inlangLixPluginV1.diff.variant({ old, neu });\n\t\texpect(diff).toEqual([\n\t\t\t{ operation: \"create\", type: \"variant\", neu, old } satisfies DiffReport,\n\t\t]);\n\t});\n});\n"]}