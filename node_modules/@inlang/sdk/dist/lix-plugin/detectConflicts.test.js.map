{"version":3,"file":"detectConflicts.test.js","sourceRoot":"/","sources":["lix-plugin/detectConflicts.test.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport { test, expect } from \"vitest\";\nimport { inlangLixPluginV1 } from \"./inlangLixPluginV1.js\";\nimport {\n\tnewLixFile,\n\topenLixInMemory,\n\ttype Change,\n\ttype NewChange,\n} from \"@lix-js/sdk\";\n\ntest.skip(\"a create operation should not report a conflict given that the change does not exist in target\", async () => {\n\tconst targetLix = await openLixInMemory({ blob: await newLixFile() });\n\tconst sourceLix = await openLixInMemory({ blob: await newLixFile() });\n\tconst changes = await sourceLix.db\n\t\t.insertInto(\"change\")\n\t\t.values([\n\t\t\t{\n\t\t\t\tid: \"1\",\n\t\t\t\tparent_id: undefined,\n\t\t\t\toperation: \"create\",\n\t\t\t\tfile_id: \"mock\",\n\t\t\t\tplugin_key: \"mock\",\n\t\t\t\ttype: \"mock\",\n\t\t\t\tvalue: { id: \"change 1\" },\n\t\t\t},\n\t\t])\n\t\t.returningAll()\n\t\t.execute();\n\tconst conflicts = await inlangLixPluginV1.detectConflicts!({\n\t\tsourceLix,\n\t\ttargetLix,\n\t\tleafChangesOnlyInSource: changes,\n\t});\n\texpect(conflicts).toHaveLength(0);\n});\n\ntest.todo(\n\t\"it should report deletions as a conflict if the parent of the target and source are not identical\",\n\tasync () => {\n\t\tconst targetLix = await openLixInMemory({ blob: await newLixFile() });\n\t\tawait targetLix.db\n\t\t\t.insertInto(\"change\")\n\t\t\t.values([\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tparent_id: undefined,\n\t\t\t\t\toperation: \"create\",\n\t\t\t\t\tfile_id: \"mock\",\n\t\t\t\t\tplugin_key: \"mock\",\n\t\t\t\t\ttype: \"mock\",\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tid: \"change 1\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.execute();\n\n\t\tconst sourceLix = await openLixInMemory({ blob: await targetLix.toBlob() });\n\n\t\tconst changesNotInTarget: NewChange[] = [\n\t\t\t{\n\t\t\t\tid: \"2\",\n\t\t\t\tparent_id: \"1\",\n\t\t\t\toperation: \"delete\",\n\t\t\t\tfile_id: \"mock\",\n\t\t\t\tplugin_key: \"mock\",\n\t\t\t\ttype: \"mock\",\n\t\t\t\tvalue: undefined,\n\t\t\t},\n\t\t];\n\n\t\tawait sourceLix.db\n\t\t\t.insertInto(\"change\")\n\t\t\t.values(changesNotInTarget)\n\t\t\t.execute();\n\n\t\tconst conflicts = await inlangLixPluginV1.detectConflicts!({\n\t\t\tsourceLix,\n\t\t\ttargetLix,\n\t\t\tleafChangesOnlyInSource: changesNotInTarget as Change[],\n\t\t});\n\t\texpect(conflicts).toHaveLength(1);\n\t\texpect(conflicts[0]?.change_id).toBe(\"1\");\n\t\texpect(conflicts[0]?.conflicting_change_id).toBe(\"2\");\n\t\tthrow new Error(\"The parent is identicak, fix this test\");\n\t}\n);\n\ntest.skip(\"it should report an UPDATE as a conflict if leaf changes are conflicting\", async () => {\n\tconst targetLix = await openLixInMemory({ blob: await newLixFile() });\n\tconst sourceLix = await openLixInMemory({ blob: await targetLix.toBlob() });\n\n\tconst commonChanges: NewChange[] = [\n\t\t{\n\t\t\tid: \"12s\",\n\t\t\tparent_id: undefined,\n\t\t\toperation: \"create\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"change 12s\",\n\t\t\t},\n\t\t},\n\t];\n\n\tconst changesOnlyInTarget: NewChange[] = [\n\t\t{\n\t\t\tid: \"3sd\",\n\t\t\tparent_id: \"12s\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"change 3sd\",\n\t\t\t},\n\t\t},\n\t];\n\n\tconst changesOnlyInSource: NewChange[] = [\n\t\t{\n\t\t\tid: \"2qa\",\n\t\t\tparent_id: \"12s\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"change 2qa\",\n\t\t\t},\n\t\t},\n\t];\n\n\tawait sourceLix.db\n\t\t.insertInto(\"change\")\n\t\t.values([...commonChanges, ...changesOnlyInSource])\n\t\t.execute();\n\n\tawait targetLix.db\n\t\t.insertInto(\"change\")\n\t\t.values([...commonChanges, ...changesOnlyInTarget])\n\t\t.execute();\n\n\tconst conflicts = await inlangLixPluginV1.detectConflicts!({\n\t\tleafChangesOnlyInSource: changesOnlyInSource as Change[],\n\t\tsourceLix: sourceLix,\n\t\ttargetLix: targetLix,\n\t});\n\n\texpect(conflicts).toHaveLength(1);\n});\n\n/**\n * If the common ancestor is the leaf change of the target, then the\n * source change are (likely) not a conflict because no update has\n * been made to the target change that could conflict with updates\n * in the source.\n */\ntest.skip(\"it should NOT report an UPDATE as a conflict if the common ancestor is the leaf change of the target\", async () => {\n\tconst targetLix = await openLixInMemory({ blob: await newLixFile() });\n\tconst sourceLix = await openLixInMemory({ blob: await targetLix.toBlob() });\n\n\tconst commonChanges: NewChange[] = [\n\t\t{\n\t\t\tid: \"12s\",\n\t\t\tparent_id: undefined,\n\t\t\toperation: \"create\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"change 12s\",\n\t\t\t},\n\t\t},\n\t];\n\n\tconst changesOnlyInTarget: NewChange[] = [\n\t\t{\n\t\t\tid: \"3sd\",\n\t\t\tparent_id: \"12s\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"change 3sd\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: \"23a\",\n\t\t\tparent_id: \"3sd\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"change 23a\",\n\t\t\t},\n\t\t},\n\t];\n\n\tconst changesOnlyInSource: NewChange[] = [];\n\n\tawait sourceLix.db\n\t\t.insertInto(\"change\")\n\t\t.values([...commonChanges, ...changesOnlyInSource])\n\t\t.execute();\n\n\tawait targetLix.db\n\t\t.insertInto(\"change\")\n\t\t.values([...commonChanges, ...changesOnlyInTarget])\n\t\t.execute();\n\n\tconst conflicts = await inlangLixPluginV1.detectConflicts!({\n\t\tleafChangesOnlyInSource: changesOnlyInSource as Change[],\n\t\tsourceLix: sourceLix,\n\t\ttargetLix: targetLix,\n\t});\n\n\texpect(conflicts).toHaveLength(0);\n});\n\ntest.skip(\"it should NOT report a DELETE as a conflict if the parent of the target and source are identical\", async () => {\n\tconst targetLix = await openLixInMemory({ blob: await newLixFile() });\n\tawait targetLix.db\n\t\t.insertInto(\"change\")\n\t\t.values([\n\t\t\t{\n\t\t\t\tid: \"12s\",\n\t\t\t\tparent_id: undefined,\n\t\t\t\toperation: \"create\",\n\t\t\t\tfile_id: \"mock\",\n\t\t\t\tplugin_key: \"mock\",\n\t\t\t\ttype: \"mock\",\n\t\t\t\tvalue: {\n\t\t\t\t\tid: \"change 12s\",\n\t\t\t\t},\n\t\t\t},\n\t\t])\n\t\t.execute();\n\n\tconst sourceLix = await openLixInMemory({ blob: await targetLix.toBlob() });\n\n\tconst changesNotInTarget: NewChange[] = [\n\t\t{\n\t\t\tid: \"3sd\",\n\t\t\tparent_id: \"12s\",\n\t\t\toperation: \"delete\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: undefined,\n\t\t},\n\t];\n\n\tconst changesNotInSource: NewChange[] = [\n\t\t{\n\t\t\tid: \"2qa\",\n\t\t\tparent_id: \"12s\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"mock\",\n\t\t\tvalue: {\n\t\t\t\tid: \"2qa\",\n\t\t\t},\n\t\t},\n\t];\n\n\tawait sourceLix.db.insertInto(\"change\").values(changesNotInTarget).execute();\n\n\tawait targetLix.db.insertInto(\"change\").values(changesNotInSource).execute();\n\n\tconst conflicts = await inlangLixPluginV1.detectConflicts!({\n\t\tsourceLix,\n\t\ttargetLix,\n\t\tleafChangesOnlyInSource: changesNotInTarget as Change[],\n\t});\n\n\texpect(conflicts).toHaveLength(1);\n\texpect(conflicts[0]?.change_id).toBe(\"2qa\");\n\texpect(conflicts[0]?.conflicting_change_id).toBe(\"3sd\");\n});\n"]}