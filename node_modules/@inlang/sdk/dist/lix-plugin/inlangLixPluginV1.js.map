{"version":3,"file":"inlangLixPluginV1.js","sourceRoot":"/","sources":["lix-plugin/inlangLixPluginV1.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport type { DiffReport, LixPlugin } from \"@lix-js/sdk\";\nimport { loadDatabaseInMemory } from \"sqlite-wasm-kysely\";\nimport { initDb } from \"../database/initDb.js\";\nimport { applyChanges } from \"./applyChanges.js\";\nimport { detectConflicts } from \"./detectConflicts.js\";\nimport type { Bundle, Message, Variant } from \"../database/schema.js\";\n\nexport const inlangLixPluginV1: LixPlugin<{\n\tbundle: Bundle;\n\tmessage: Message;\n\tvariant: Variant;\n}> = {\n\tkey: \"inlang-lix-plugin-v1\",\n\tglob: \"*\",\n\tapplyChanges,\n\tdetectConflicts,\n\tdiff: {\n\t\t// TODO does not account for deletions\n\t\tfile: async ({ old, neu }) => {\n\t\t\t// can only handle the database for now\n\t\t\tif (neu === undefined || neu.path?.endsWith(\"db.sqlite\") === false) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst result: DiffReport[] = [];\n\t\t\tconst oldDb = old\n\t\t\t\t? initDb({ sqlite: await loadDatabaseInMemory(old.data) })\n\t\t\t\t: undefined;\n\n\t\t\tconst newDb = neu\n\t\t\t\t? initDb({\n\t\t\t\t\t\tsqlite: await loadDatabaseInMemory(neu.data),\n\t\t\t\t\t})\n\t\t\t\t: undefined;\n\n\t\t\tconst newProjectBundles = await newDb\n\t\t\t\t?.selectFrom(\"bundle\")\n\t\t\t\t.selectAll()\n\t\t\t\t.execute();\n\n\t\t\tconst newProjectMessages = await newDb\n\t\t\t\t?.selectFrom(\"message\")\n\t\t\t\t.selectAll()\n\t\t\t\t.execute();\n\t\t\tconst newProjectVariants = await newDb\n\t\t\t\t?.selectFrom(\"variant\")\n\t\t\t\t.selectAll()\n\t\t\t\t.execute();\n\n\t\t\tfor (const bundle of newProjectBundles ?? []) {\n\t\t\t\tconst oldBundle = await oldDb\n\t\t\t\t\t?.selectFrom(\"bundle\")\n\t\t\t\t\t.selectAll()\n\t\t\t\t\t.where(\"id\", \"=\", bundle.id)\n\t\t\t\t\t.executeTakeFirst();\n\t\t\t\tresult.push(\n\t\t\t\t\t...(await inlangLixPluginV1.diff.bundle({\n\t\t\t\t\t\told: oldBundle,\n\t\t\t\t\t\tneu: bundle,\n\t\t\t\t\t}))\n\t\t\t\t);\n\t\t\t}\n\t\t\tfor (const message of newProjectMessages ?? []) {\n\t\t\t\tconst oldMessage = await oldDb\n\t\t\t\t\t?.selectFrom(\"message\")\n\t\t\t\t\t.selectAll()\n\t\t\t\t\t.where(\"id\", \"=\", message.id)\n\t\t\t\t\t.executeTakeFirst();\n\n\t\t\t\tresult.push(\n\t\t\t\t\t...(await inlangLixPluginV1.diff.message({\n\t\t\t\t\t\told: oldMessage,\n\t\t\t\t\t\tneu: message,\n\t\t\t\t\t}))\n\t\t\t\t);\n\t\t\t}\n\t\t\tfor (const variant of newProjectVariants ?? []) {\n\t\t\t\tconst oldVariant = await oldDb\n\t\t\t\t\t?.selectFrom(\"variant\")\n\t\t\t\t\t.selectAll()\n\t\t\t\t\t.where(\"id\", \"=\", variant.id)\n\t\t\t\t\t.executeTakeFirst();\n\t\t\t\tresult.push(\n\t\t\t\t\t...(await inlangLixPluginV1.diff.variant({\n\t\t\t\t\t\told: oldVariant,\n\t\t\t\t\t\tneu: variant,\n\t\t\t\t\t}))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\tbundle: ({ old, neu }) => diffSnapshot({ old, neu, type: \"bundle\" }),\n\t\tmessage: ({ old, neu }) => diffSnapshot({ old, neu, type: \"message\" }),\n\t\tvariant: ({ old, neu }) => diffSnapshot({ old, neu, type: \"variant\" }),\n\t},\n};\n\nfunction diffSnapshot({\n\told,\n\tneu,\n\ttype,\n}: {\n\told?: Bundle | Message | Variant;\n\tneu?: Bundle | Message | Variant;\n\ttype: \"bundle\" | \"message\" | \"variant\";\n}): DiffReport[] {\n\tif (old === undefined && neu) {\n\t\treturn [{ type, old, neu, operation: \"create\" } satisfies DiffReport];\n\t} else if (old !== undefined && neu === undefined) {\n\t\treturn [{ type, old, neu, operation: \"delete\" } satisfies DiffReport];\n\t} else if (old && neu) {\n\t\tconst hasDiff = JSON.stringify(old) !== JSON.stringify(neu);\n\t\tif (hasDiff) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttype,\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\t// id is required for deletions\n\t\t\t\t\t\tid: old.id ?? neu.id,\n\t\t\t\t\t},\n\t\t\t\t\toperation: \"update\",\n\t\t\t\t\told,\n\t\t\t\t\tneu,\n\t\t\t\t} satisfies DiffReport,\n\t\t\t];\n\t\t}\n\t}\n\treturn [];\n}\n"]}