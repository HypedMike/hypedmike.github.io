{"version":3,"file":"detectConflicts.js","sourceRoot":"/","sources":["lix-plugin/detectConflicts.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,cAAc;AAEd,OAAO,EACN,uBAAuB,EACvB,aAAa,GAGb,MAAM,aAAa,CAAC;AAErB,MAAM,CAAC,MAAM,eAAe,GAAiC,KAAK,EAAE,EACnE,SAAS,EACT,SAAS,EACT,uBAAuB,GACvB,EAAE,EAAE;IACJ,MAAM,MAAM,GAAkB,EAAE,CAAC;IACjC,KAAK,MAAM,MAAM,IAAI,uBAAuB,EAAE,CAAC;QAC9C,MAAM,oBAAoB,GAAG,MAAM,uBAAuB,CAAC;YAC1D,YAAY,EAAE,MAAM;YACpB,SAAS;YACT,SAAS;SACT,CAAC,CAAC;QAEH,IAAI,oBAAoB,KAAK,SAAS,EAAE,CAAC;YACxC,mDAAmD;YACnD,SAAS;QACV,CAAC;QAED,MAAM,kBAAkB,GAAG,MAAM,aAAa,CAAC;YAC9C,MAAM,EAAE,oBAAoB;YAC5B,GAAG,EAAE,SAAS;SACd,CAAC,CAAC;QAEH,IAAI,oBAAoB,CAAC,EAAE,KAAK,kBAAkB,CAAC,EAAE,EAAE,CAAC;YACvD,6CAA6C;YAC7C,iDAAiD;YACjD,+DAA+D;YAC/D,SAAS;QACV,CAAC;QAED,MAAM,OAAO,GACZ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAE3E,IAAI,OAAO,KAAK,KAAK,EAAE,CAAC;YACvB,qEAAqE;YACrE,oEAAoE;YACpE,iEAAiE;YACjE,mDAAmD;YACnD,SAAS;QACV,CAAC;QAED,4DAA4D;QAC5D,mEAAmE;QACnE,MAAM,CAAC,IAAI,CAAC;YACX,SAAS,EAAE,kBAAkB,CAAC,EAAE;YAChC,qBAAqB,EAAE,MAAM,CAAC,EAAE;YAChC,MAAM,EACL,6FAA6F;SAC9F,CAAC,CAAC;IACJ,CAAC;IACD,OAAO,MAAM,CAAC;AACf,CAAC,CAAC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport {\n\tgetLowestCommonAncestor,\n\tgetLeafChange,\n\ttype LixPlugin,\n\ttype NewConflict,\n} from \"@lix-js/sdk\";\n\nexport const detectConflicts: LixPlugin[\"detectConflicts\"] = async ({\n\tsourceLix,\n\ttargetLix,\n\tleafChangesOnlyInSource,\n}) => {\n\tconst result: NewConflict[] = [];\n\tfor (const change of leafChangesOnlyInSource) {\n\t\tconst lowestCommonAncestor = await getLowestCommonAncestor({\n\t\t\tsourceChange: change,\n\t\t\tsourceLix,\n\t\t\ttargetLix,\n\t\t});\n\n\t\tif (lowestCommonAncestor === undefined) {\n\t\t\t// no common parent, no conflict. must be an insert\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst leafChangeInTarget = await getLeafChange({\n\t\t\tchange: lowestCommonAncestor,\n\t\t\tlix: targetLix,\n\t\t});\n\n\t\tif (lowestCommonAncestor.id === leafChangeInTarget.id) {\n\t\t\t// no conflict. the lowest common ancestor is\n\t\t\t// the leaf change in the target. aka, no changes\n\t\t\t// in target have been made that could conflict with the source\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst hasDiff =\n\t\t\tJSON.stringify(change.value) !== JSON.stringify(leafChangeInTarget.value);\n\n\t\tif (hasDiff === false) {\n\t\t\t// TODO we have two different changes that yielded the same snapshot,\n\t\t\t// lix or the plugin need to change the parents of the target change\n\t\t\t// to both the source and the target change. users likely want to\n\t\t\t// see that two \"branches\" led to the same snapshot\n\t\t\tcontinue;\n\t\t}\n\n\t\t// naive raise any snapshot difference as a conflict for now\n\t\t// more sophisticated conflict reporting can be incrementally added\n\t\tresult.push({\n\t\t\tchange_id: leafChangeInTarget.id,\n\t\t\tconflicting_change_id: change.id,\n\t\t\treason:\n\t\t\t\t\"The snapshots of the change do not match. More sophisticated reasoning will be added later.\",\n\t\t});\n\t}\n\treturn result;\n};\n"]}