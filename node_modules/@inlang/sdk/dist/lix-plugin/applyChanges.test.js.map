{"version":3,"file":"applyChanges.test.js","sourceRoot":"/","sources":["lix-plugin/applyChanges.test.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport { test, expect } from \"vitest\";\nimport { loadProjectInMemory } from \"../project/loadProjectInMemory.js\";\nimport { newProject } from \"../project/newProject.js\";\nimport type { Change, NewChange } from \"@lix-js/sdk\";\nimport { applyChanges } from \"./applyChanges.js\";\nimport { loadDatabaseInMemory } from \"sqlite-wasm-kysely\";\nimport { initDb } from \"../database/initDb.js\";\nimport type { Bundle } from \"../database/schema.js\";\n\ntest.skip(\"it should be able to delete\", async () => {\n\tconst project = await loadProjectInMemory({\n\t\tblob: await newProject(),\n\t});\n\n\tconst changes: NewChange[] = [\n\t\t{\n\t\t\tid: \"1\",\n\t\t\toperation: \"create\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"bundle\",\n\t\t\tmeta: { id: \"mock\" },\n\t\t\tvalue: {\n\t\t\t\tid: \"mock\",\n\t\t\t\tdeclarations: [],\n\t\t\t} satisfies Bundle,\n\t\t},\n\t\t{\n\t\t\tid: \"2\",\n\t\t\tparent_id: \"1\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"bundle\",\n\t\t\tmeta: {\n\t\t\t\tid: \"mock\",\n\t\t\t},\n\t\t\tvalue: {\n\t\t\t\tid: \"mock\",\n\t\t\t\tdeclarations: [],\n\t\t\t} satisfies Bundle,\n\t\t},\n\t\t{\n\t\t\tid: \"3\",\n\t\t\tparent_id: \"2\",\n\t\t\toperation: \"delete\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\tmeta: {\n\t\t\t\tid: \"mock\",\n\t\t\t},\n\t\t\ttype: \"bundle\",\n\t\t\tvalue: undefined,\n\t\t},\n\t];\n\n\tawait project.db\n\t\t.insertInto(\"bundle\")\n\t\t.values({\n\t\t\tid: \"mock\",\n\t\t})\n\t\t.execute();\n\n\tconst dbFile = await project.lix.db\n\t\t.selectFrom(\"file\")\n\t\t.selectAll()\n\t\t.where(\"path\", \"=\", \"/db.sqlite\")\n\t\t.executeTakeFirstOrThrow();\n\n\tconst dbFileAfter = await applyChanges({\n\t\tlix: project.lix,\n\t\tfile: dbFile,\n\t\tchanges: changes as Change[],\n\t});\n\n\tconst db = initDb({\n\t\tsqlite: await loadDatabaseInMemory(dbFileAfter.fileData),\n\t});\n\n\tconst bundles = await db.selectFrom(\"bundle\").selectAll().execute();\n\n\texpect(bundles).toHaveLength(0);\n});\n\ntest.skip(\"it should be able to upsert (insert & update)\", async () => {\n\tconst project = await loadProjectInMemory({\n\t\tblob: await newProject(),\n\t});\n\n\tconst changes: NewChange[] = [\n\t\t{\n\t\t\tid: \"1\",\n\t\t\tparent_id: undefined,\n\t\t\toperation: \"create\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"bundle\",\n\t\t\tmeta: { id: \"mock\" },\n\t\t\tvalue: {\n\t\t\t\tid: \"mock\",\n\t\t\t\tdeclarations: [],\n\t\t\t} satisfies Bundle,\n\t\t},\n\t\t{\n\t\t\tid: \"2\",\n\t\t\tparent_id: \"1\",\n\t\t\toperation: \"update\",\n\t\t\tfile_id: \"mock\",\n\t\t\tplugin_key: \"mock\",\n\t\t\ttype: \"bundle\",\n\t\t\tmeta: {\n\t\t\t\tid: \"mock\",\n\t\t\t},\n\t\t\tvalue: {\n\t\t\t\tid: \"mock\",\n\t\t\t\tdeclarations: [],\n\t\t\t} satisfies Bundle,\n\t\t},\n\t];\n\n\tawait project.db\n\t\t.insertInto(\"bundle\")\n\t\t.values({\n\t\t\tid: \"mock\",\n\t\t})\n\t\t.execute();\n\n\tconst dbFile = await project.lix.db\n\t\t.selectFrom(\"file\")\n\t\t.selectAll()\n\t\t.where(\"path\", \"=\", \"/db.sqlite\")\n\t\t.executeTakeFirstOrThrow();\n\n\tconst dbFileAfter = await applyChanges({\n\t\tlix: project.lix,\n\t\tfile: dbFile,\n\t\tchanges: changes as Change[],\n\t});\n\n\tconst db = initDb({\n\t\tsqlite: await loadDatabaseInMemory(dbFileAfter.fileData),\n\t});\n\n\tconst bundles = await db.selectFrom(\"bundle\").selectAll().execute();\n\n\texpect(bundles).toHaveLength(1);\n});\n"]}