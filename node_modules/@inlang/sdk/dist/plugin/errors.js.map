{"version":3,"file":"errors.js","sourceRoot":"/","sources":["plugin/errors.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,WAAY,SAAQ,KAAK;IACrB,MAAM,CAAS;IAE/B,YAAY,OAAe,EAAE,OAA0C;QACtE,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC5B,CAAC;CACD;AAED;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IACjD,YAAY,OAAyC;QACpD,KAAK,CACJ,+BAA+B,OAAO,CAAC,MAAM,SAAS,OAAO,CAAC,KAAK,EAAE,EACrE,OAAO,CACP,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;IACjC,CAAC;CACD;AAED,MAAM,OAAO,6BAA8B,SAAQ,WAAW;IAC7D,YAAY,OAAiD;QAC5D,KAAK,CACJ,oBAAoB,OAAO,CAAC,MAAM,qBAAqB,OAAO,CAAC,MAAM;aACnE,GAAG,CACH,CAAC,KAAK,EAAE,EAAE,CACT,SAAS,KAAK,CAAC,IAAI,iBAAiB,IAAI,CAAC,SAAS,CACjD,KAAK,CAAC,KAAK,EACX,SAAS,EACT,CAAC,CACD,OAAO,KAAK,CAAC,OAAO,GAAG,CACzB;aACA,IAAI,CAAC,IAAI,CAAC,EAAE,EACd,OAAO,CACP,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,+BAA+B,CAAC;IAC7C,CAAC;CACD;AAED;;GAEG;AACH,MAAM,OAAO,mCAAoC,SAAQ,WAAW;IACnE,YAAY,OAA6C;QACxD,KAAK,CACJ,eAAe,OAAO,CAAC,MAAM,6BAA6B,OAAO,CAAC,QAAQ,aAAa,EACvF,OAAO,CACP,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,gCAAgC,CAAC;IAC9C,CAAC;CACD;AAED;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,WAAW;IAClD,YAAY,OAA2B;QACtC,KAAK,CAAC,eAAe,OAAO,CAAC,MAAM,kBAAkB,EAAE,OAAO,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC;IAClC,CAAC;CACD","sourcesContent":["import type { ValueError } from \"@sinclair/typebox/errors\";\n\nexport class PluginError extends Error {\n\tpublic readonly plugin: string;\n\n\tconstructor(message: string, options: { plugin: string; cause?: Error }) {\n\t\tsuper(message);\n\t\tthis.name = \"PluginError\";\n\t\tthis.plugin = options.plugin;\n\t\tthis.cause = options.cause;\n\t}\n}\n\n/**\n * Error when a plugin cannot be imported.\n */\nexport class PluginImportError extends PluginError {\n\tconstructor(options: { plugin: string; cause: Error }) {\n\t\tsuper(\n\t\t\t`Couldn't import the plugin \"${options.plugin}\":\\n\\n${options.cause}`,\n\t\t\toptions\n\t\t);\n\t\tthis.name = \"PluginImportError\";\n\t}\n}\n\nexport class PluginSettingsAreInvalidError extends PluginError {\n\tconstructor(options: { plugin: string; errors: ValueError[] }) {\n\t\tsuper(\n\t\t\t`The settings of \"${options.plugin}\" are invalid:\\n\\n${options.errors\n\t\t\t\t.map(\n\t\t\t\t\t(error) =>\n\t\t\t\t\t\t`Path \"${error.path}\" with value \"${JSON.stringify(\n\t\t\t\t\t\t\terror.value,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t2\n\t\t\t\t\t\t)}\": \"${error.message}\"`\n\t\t\t\t)\n\t\t\t\t.join(\"\\n\")}`,\n\t\t\toptions\n\t\t);\n\t\tthis.name = \"PluginSettingsAreInvalidError\";\n\t}\n}\n\n/**\n * Error when a plugin does not implement a required function\n */\nexport class PluginDoesNotImplementFunctionError extends PluginError {\n\tconstructor(options: { plugin: string; function: string }) {\n\t\tsuper(\n\t\t\t`The plugin \"${options.plugin}\" does not implement the \"${options.function}\" function.`,\n\t\t\toptions\n\t\t);\n\t\tthis.name = \"PluginDoesNotImplementFunction\";\n\t}\n}\n\n/**\n * Error when a plugin was expected to exist, but doesn't\n */\nexport class PluginMissingError extends PluginError {\n\tconstructor(options: { plugin: string }) {\n\t\tsuper(`The plugin \"${options.plugin}\" does not exist`, options);\n\t\tthis.name = \"PluginMissingError\";\n\t}\n}\n"]}