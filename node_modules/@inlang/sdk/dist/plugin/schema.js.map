{"version":3,"file":"schema.js","sourceRoot":"/","sources":["plugin/schema.ts"],"names":[],"mappings":"","sourcesContent":["import type { TObject } from \"@sinclair/typebox\";\nimport type { MessageV1 } from \"../json-schema/old-v1-message/schemaV1.js\";\nimport type { ProjectSettings } from \"../json-schema/settings.js\";\nimport type {\n\tBundle,\n\tMessage,\n\tNewBundle,\n\tNewMessage,\n\tNewVariant,\n\tVariant,\n} from \"../database/schema.js\";\nimport type { ExportFile, ImportFile } from \"../project/api.js\";\n\nexport type InlangPlugin<\n\tExternalSettings extends Record<string, any> | unknown = unknown,\n> = {\n\t/**\n\t * @deprecated Use `key` instead.\n\t */\n\tid?: string;\n\t/**\n\t * The key of the plugin.\n\t */\n\tkey: string;\n\tsettingsSchema?: TObject;\n\t/**\n\t * @deprecated Use `importFiles` instead.\n\t */\n\tloadMessages?: (args: {\n\t\tsettings: ProjectSettings;\n\t\tnodeishFs: NodeFsPromisesSubsetLegacy;\n\t}) => Promise<MessageV1[]> | MessageV1[];\n\t/**\n\t * @deprecated Use `exportFiles` instead.\n\t */\n\tsaveMessages?: (args: {\n\t\tmessages: MessageV1[];\n\t\tsettings: ProjectSettings;\n\t\tnodeishFs: NodeFsPromisesSubsetLegacy;\n\t}) => Promise<void> | void;\n\t/**\n\t * Files that should be imported by the inlang SDK.\n\t *\n\t * - `metadata` is optional and can be used to store additional information\n\t *   that is accessible in `importFiles` via `toBeImportedMetadata`. See\n\t *   https://github.com/opral/inlang-sdk/issues/218 for more info.\n\t *\n\t */\n\ttoBeImportedFiles?: (args: {\n\t\tsettings: ProjectSettings & ExternalSettings;\n\t}) => MaybePromise<\n\t\tArray<{ path: string; locale: string; metadata?: Record<string, any> }>\n\t>;\n\timportFiles?: (args: {\n\t\tfiles: ImportFile[];\n\t\tsettings: ProjectSettings & ExternalSettings; // we expose the settings in case the importFunction needs to access the plugin config\n\t}) => MaybePromise<{\n\t\tbundles: BundleImport[];\n\t\tmessages: MessageImport[];\n\t\tvariants: VariantImport[];\n\t}>;\n\texportFiles?: (args: {\n\t\tbundles: Bundle[];\n\t\tmessages: Message[];\n\t\tvariants: Variant[];\n\t\tsettings: ProjectSettings & ExternalSettings;\n\t}) => MaybePromise<Array<ExportFile>>;\n\t/**\n\t * @deprecated Use the `meta` field instead.\n\t */\n\taddCustomApi?: (args: {\n\t\tsettings: ProjectSettings & ExternalSettings;\n\t}) => Record<string, unknown>;\n\t/**\n\t * Define app-specific APIs under a `meta` field.\n\t *\n\t * @example\n\t * meta: {\n\t *   \"app.inlang.ide-extension\": {\n\t *     documentPaths: [\"*.json\"]\n\t *   }\n\t * }\n\t */\n\tmeta?: Record<string, Record<string, unknown>>;\n};\n\n/**\n * Exposing only a subset to ease mapping of fs functions.\n *\n * https://github.com/opral/inlang-sdk/issues/136\n */\nexport type NodeFsPromisesSubsetLegacy = {\n\treadFile:\n\t\t| ((path: string) => Promise<ArrayBuffer>)\n\t\t| ((path: string, options?: { encoding: \"utf-8\" }) => Promise<string>);\n\treaddir: (path: string) => Promise<string[]>;\n\twriteFile: (path: string, data: ArrayBuffer | string) => Promise<void>;\n\tmkdir: (path: string) => Promise<void>;\n};\n\n/**\n * A to be imported bundle.\n */\nexport type BundleImport = NewBundle;\n\n/**\n * A to be imported message.\n *\n * The `id` property is omitted because it is generated by the SDK.\n */\nexport type MessageImport = Omit<NewMessage, \"id\"> & {\n\t/**\n\t * If the id is not provided, the SDK will generate one.\n\t */\n\tid?: string;\n};\n\n/**\n * A to be imported variant.\n *\n * - The `id` and `messageId` properties are omitted because they are generated by the SDK.\n * - The `bundleId` and `locale` properties are added to the import variant to match the variant\n *   with a message.\n */\nexport type VariantImport =\n\t| (NewVariant & {\n\t\t\t/**\n\t\t\t * If the id is not provided, the SDK will generate one.\n\t\t\t */\n\t\t\tid: string;\n\t\t\t/**\n\t\t\t * If the messageId is not provided, the SDK will match the variant\n\t\t\t * with a message based on the `messageBundleId` and `messageLocale` properties.\n\t\t\t */\n\t\t\tmessageId: string;\n\t\t\t/**\n\t\t\t * Required to match the variant with a message in case the `id` and `messageId` are undefined.\n\t\t\t */\n\t\t\tmessageBundleId?: undefined;\n\t\t\t/**\n\t\t\t * Required to match the variant with a message in case the `id` and `messageId` are undefined.\n\t\t\t */\n\t\t\tmessageLocale?: undefined;\n\t  })\n\t| (Omit<NewVariant, \"id\" | \"messageId\"> & {\n\t\t\t/**\n\t\t\t * If the id is not provided, the SDK will generate one.\n\t\t\t */\n\t\t\tid?: undefined;\n\t\t\t/**\n\t\t\t * If the messageId is not provided, the SDK will match the variant\n\t\t\t * with a message based on the `messageBundleId` and `messageLocale` properties.\n\t\t\t */\n\t\t\tmessageId?: undefined;\n\t\t\t/**\n\t\t\t * Required to match the variant with a message in case the `id` and `messageId` are undefined.\n\t\t\t */\n\t\t\tmessageBundleId: string;\n\t\t\t/**\n\t\t\t * Required to match the variant with a message in case the `id` and `messageId` are undefined.\n\t\t\t */\n\t\t\tmessageLocale: string;\n\t  });\n\ntype MaybePromise<T> = T | Promise<T>;\n"]}