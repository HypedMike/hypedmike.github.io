{"version":3,"file":"cache.test.js","sourceRoot":"/","sources":["plugin/cache.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect, vi } from \"vitest\";\nimport { withCache } from \"./cache.js\";\nimport { newLixFile, openLixInMemory } from \"@lix-js/sdk\";\nimport { sql } from \"kysely\";\n\ntest(\"it should be network-first\", async () => {\n\tconst mockLoader = vi\n\t\t.fn()\n\t\t.mockResolvedValueOnce(\"module content 1\")\n\t\t.mockResolvedValueOnce(\"module content 2\");\n\n\tconst mockModulePath = \"https://mock.com/module.js\";\n\n\tconst lix = await openLixInMemory({ blob: await newLixFile() });\n\n\tconst result1 = await withCache(mockLoader, lix)(mockModulePath);\n\n\texpect(mockLoader).toHaveBeenCalledTimes(1);\n\texpect(result1).toBe(\"module content 1\");\n\n\tconst cachedPlugins = await lix.db\n\t\t.selectFrom(\"file\")\n\t\t.selectAll()\n\t\t// @ts-expect-error - kysely doesn't know about GLOB\n\t\t.where(sql`path GLOB '/cache/plugins/*'`)\n\t\t.execute();\n\n\texpect(cachedPlugins.length).toBe(1);\n\n\tconst parsed = new TextDecoder().decode(cachedPlugins[0]!.data);\n\n\texpect(parsed).toBe(\"module content 1\");\n\n\tconst result2 = await withCache(mockLoader, lix)(mockModulePath);\n\n\texpect(mockLoader).toHaveBeenCalledTimes(2);\n\texpect(result2).toBe(\"module content 2\");\n\n\tconst cachedPlugins2 = await lix.db\n\t\t.selectFrom(\"file\")\n\t\t.selectAll()\n\t\t// @ts-expect-error - kysely doesn't know about GLOB\n\t\t.where(sql`path GLOB '/cache/plugins/*'`)\n\t\t.execute();\n\n\texpect(cachedPlugins2.length).toBe(1);\n\n\tconst parsed2 = new TextDecoder().decode(cachedPlugins2[0]!.data);\n\n\texpect(parsed2).toBe(\"module content 2\");\n});\n\ntest(\"it should throw the error from the loader if the cache does not exist\", async () => {\n\tconst mockLoader = vi.fn().mockRejectedValueOnce(new Error(\"Network error\"));\n\n\tconst mockModulePath = \"https://mock.com/module.js\";\n\n\tconst lix = await openLixInMemory({ blob: await newLixFile() });\n\n\tawait expect(\n\t\tasync () => await withCache(mockLoader, lix)(mockModulePath)\n\t).rejects.toThrowError(\"Network error\");\n});\n\ntest(\"it should fallback to the cache if the loader fails\", async () => {\n\tconst mockLoader = vi.fn().mockRejectedValueOnce(new Error(\"Network error\"));\n\n\tconst mockModulePath = \"https://mock.com/module.js\";\n\tconst mockModuleCachePath = \"/cache/plugins/31i1etp0l413h\";\n\n\tconst lix = await openLixInMemory({ blob: await newLixFile() });\n\n\tawait lix.db\n\t\t.insertInto(\"file\")\n\t\t.values({\n\t\t\tpath: mockModuleCachePath,\n\t\t\tdata: new TextEncoder().encode(\"cached module content\"),\n\t\t})\n\t\t.execute();\n\n\tconst result = await withCache(mockLoader, lix)(mockModulePath);\n\texpect(result).toBe(\"cached module content\");\n});\n"]}