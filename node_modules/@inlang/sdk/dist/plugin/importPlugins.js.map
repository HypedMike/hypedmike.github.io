{"version":3,"file":"importPlugins.js","sourceRoot":"/","sources":["plugin/importPlugins.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAE7D,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAWvC,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,IAInC;IAIA,MAAM,OAAO,GAAmB,EAAE,CAAC;IACnC,MAAM,MAAM,GAAkB,EAAE,CAAC;IACjC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,EAAE,CAAC;QAC/C,IAAI,CAAC;YACJ,IAAI,YAAY,GAAG,MAAM,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YAC/D,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACvC,YAAY,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAC;YACtE,CAAC;YACD,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;gBAC1B,mDAAmD;gBACnD,WAAW,GAAG,GAAG,CAAC,eAAe,CAChC,IAAI,IAAI,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CACrD,CAAC;YACH,CAAC;iBAAM,CAAC;gBACP,kBAAkB;gBAClB,WAAW,GAAG,8BAA8B,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACnE,CAAC;YACD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YACzE,kDAAkD;YAClD,0CAA0C;YAC1C,IAAI,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC5C,SAAS;YACV,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,MAAM,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,CAAU,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC;IACF,CAAC;IACD,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AAC5B,CAAC;AAED,KAAK,UAAU,WAAW,CAAC,GAAW;IACrC,IAAI,CAAC;QACJ,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAChB,MAAM,IAAI,iBAAiB,CAAC;YAC3B,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,KAAc;SACrB,CAAC,CAAC;IACJ,CAAC;AACF,CAAC","sourcesContent":["import type { Lix } from \"@lix-js/sdk\";\nimport type { ProjectSettings } from \"../json-schema/settings.js\";\nimport { PluginError, PluginImportError } from \"./errors.js\";\nimport type { InlangPlugin } from \"./schema.js\";\nimport { withCache } from \"./cache.js\";\n\n/**\n * Function that preprocesses the plugin before importing it.\n *\n * - used by sherlock to convert ESM to CJS\n */\nexport type PreprocessPluginBeforeImportFunction = (\n\tmoduleText: string\n) => Promise<string> | string;\n\nexport async function importPlugins(args: {\n\tlix: Lix;\n\tsettings: ProjectSettings;\n\tpreprocessPluginBeforeImport?: PreprocessPluginBeforeImportFunction;\n}): Promise<{\n\tplugins: InlangPlugin[];\n\terrors: PluginError[];\n}> {\n\tconst plugins: InlangPlugin[] = [];\n\tconst errors: PluginError[] = [];\n\tfor (const uri of args.settings.modules ?? []) {\n\t\ttry {\n\t\t\tlet moduleAsText = await withCache(fetchPlugin, args.lix)(uri);\n\t\t\tif (args.preprocessPluginBeforeImport) {\n\t\t\t\tmoduleAsText = await args.preprocessPluginBeforeImport(moduleAsText);\n\t\t\t}\n\t\t\tlet moduleAsURL;\n\t\t\tif (process.versions.bun) {\n\t\t\t\t// In bun we need to do dynamic imports differently\n\t\t\t\tmoduleAsURL = URL.createObjectURL(\n\t\t\t\t\tnew Blob([moduleAsText], { type: \"text/javascript\" })\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// node and others\n\t\t\t\tmoduleAsURL = \"data:text/javascript;base64,\" + btoa(moduleAsText);\n\t\t\t}\n\t\t\tconst { default: module } = await import(/* @vite-ignore */ moduleAsURL);\n\t\t\t// old legacy message lint rules are not supported\n\t\t\t// and ingored for backwards compatibility\n\t\t\tif (module.id?.includes(\"messageLintRule\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tplugins.push(module);\n\t\t} catch (e) {\n\t\t\terrors.push(new PluginImportError({ plugin: uri, cause: e as Error }));\n\t\t}\n\t}\n\treturn { plugins, errors };\n}\n\nasync function fetchPlugin(uri: string): Promise<string> {\n\ttry {\n\t\tconst response = await fetch(uri);\n\t\treturn await response.text();\n\t} catch (error) {\n\t\tthrow new PluginImportError({\n\t\t\tplugin: uri,\n\t\t\tcause: error as Error,\n\t\t});\n\t}\n}\n"]}