{"version":3,"file":"detectJsonFormatting.test.js","sourceRoot":"/","sources":["utilities/detectJsonFormatting.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAEjE,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;IAChC,6BAA6B;IAC7B,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC;QAC9C,MAAM,OAAO,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAe,CAAC,CAAC;QACpE,MAAM,iBAAiB,GAAG,MAAM,OAAO,mBAAmB,CAAC;QAE3D,MAAM,SAAS,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QAC1D,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC1E,CAAC;AACF,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;IACxD,8DAA8D;IAC9D,gDAAgD;IAChD,MAAM,iBAAiB,GAAG,2BAA2B,CAAC;IAEtD,MAAM,SAAS,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;IAC1D,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC1E,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC5C,MAAM,WAAW,GAAG,mBAAmB,CAAC;IACxC,MAAM,cAAc,GAAG,iBAAiB,CAAC;IACzC,MAAM,qBAAqB,GAAG,wBAAwB,CAAC;IAEvD,MAAM,UAAU,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM,UAAU,GAAG,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;IAE/D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,CACzD,qBAAqB,CACrB,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { expect, it } from \"vitest\";\nimport { detectJsonFormatting } from \"./detectJsonFormatting.js\";\n\nit(\"should detect spacing\", () => {\n\t// test all possible spacings\n\tfor (const value of [1, 2, 3, 4, 6, 8, \"\\t\"]) {\n\t\tconst spacing = value === \"\\t\" ? \"\\t\" : \" \".repeat(value as number);\n\t\tconst objectWithSpacing = `{\\n${spacing}\"test\": \"test\"\\n}`;\n\n\t\tconst serialize = detectJsonFormatting(objectWithSpacing);\n\t\texpect(serialize(JSON.parse(objectWithSpacing))).toBe(objectWithSpacing);\n\t}\n});\n\nit(\"should detect spacing if the json is an array\", () => {\n\t// testing with one element only because dynamic generation of\n\t// arrays with different spacings is too complex\n\tconst objectWithSpacing = `[\\n\\t\"test\",\\n\\t\"test\"\\n]`;\n\n\tconst serialize = detectJsonFormatting(objectWithSpacing);\n\texpect(serialize(JSON.parse(objectWithSpacing))).toBe(objectWithSpacing);\n});\n\nit(\"should detect new lines correctly\", () => {\n\tconst withNewLine = `{\"test\":\"test\"}\\n`;\n\tconst withoutNewLine = `{\"test\":\"test\"}`;\n\tconst withNewLineAndSpacing = `{\\n\\t\"test\": \"test\"\\n}`;\n\n\tconst serialize1 = detectJsonFormatting(withNewLine);\n\tconst serialize2 = detectJsonFormatting(withoutNewLine);\n\tconst serialize3 = detectJsonFormatting(withNewLineAndSpacing);\n\n\texpect(serialize1(JSON.parse(withNewLine))).toBe(withNewLine);\n\texpect(serialize2(JSON.parse(withoutNewLine))).toBe(withoutNewLine);\n\texpect(serialize3(JSON.parse(withNewLineAndSpacing))).toBe(\n\t\twithNewLineAndSpacing\n\t);\n});\n"]}