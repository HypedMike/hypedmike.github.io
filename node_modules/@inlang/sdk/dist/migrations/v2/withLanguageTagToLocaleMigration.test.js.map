{"version":3,"file":"withLanguageTagToLocaleMigration.test.js","sourceRoot":"/","sources":["migrations/v2/withLanguageTagToLocaleMigration.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEtC,OAAO,EAAE,gCAAgC,EAAE,MAAM,uCAAuC,CAAC;AAEzF,IAAI,CAAC,0FAA0F,EAAE,KAAK,IAAI,EAAE;IAC3G,MAAM,QAAQ,GAAoB;QACjC,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;KACrB,CAAC;IAEF,MAAM,aAAa,GAAG,gCAAgC,CAAC,QAAQ,CAAC,CAAC;IAEjE,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACpD,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,mGAAmG,EAAE,KAAK,IAAI,EAAE;IACpH,MAAM,QAAQ,GAAoB;QACjC,iBAAiB,EAAE,IAAI;QACvB,YAAY,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;KACP,CAAC;IAErB,MAAM,aAAa,GAAG,gCAAgC,CAAC,QAAQ,CAAC,CAAC;IAEjE,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACzD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,IAAI,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;IAC5E,MAAM,QAAQ,GAAoB;QACjC,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QACjC,iBAAiB,EAAE,IAAI;QACvB,YAAY,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;KAC1B,CAAC;IAEF,MAAM,aAAa,GAAG,gCAAgC,CAAC,QAAQ,CAAC,CAAC;IAEjE,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACrE,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC","sourcesContent":["import { expect, test } from \"vitest\";\nimport type { ProjectSettings } from \"../../json-schema/settings.js\";\nimport { withLanguageTagToLocaleMigration } from \"./withLanguageTagToLocaleMigration.js\";\n\ntest(\"it should set sourceLanguageTag and languageTags if non-existent to make v1 plugins work\", async () => {\n\tconst settings: ProjectSettings = {\n\t\tbaseLocale: \"en\",\n\t\tlocales: [\"en\", \"de\"],\n\t};\n\n\tconst withMigration = withLanguageTagToLocaleMigration(settings);\n\n\texpect(withMigration.baseLocale).toBe(\"en\");\n\texpect(withMigration.sourceLanguageTag).toBe(\"en\");\n\texpect(withMigration.locales).toEqual([\"en\", \"de\"]);\n\texpect(withMigration.languageTags).toEqual([\"en\", \"de\"]);\n});\n\ntest(\"it should set baseLocale and locales if non-existent to ensure first load of an old project works\", async () => {\n\tconst settings: ProjectSettings = {\n\t\tsourceLanguageTag: \"en\",\n\t\tlanguageTags: [\"en\", \"de\"],\n\t} as ProjectSettings;\n\n\tconst withMigration = withLanguageTagToLocaleMigration(settings);\n\n\texpect(withMigration.baseLocale).toBe(\"en\");\n\texpect(withMigration.sourceLanguageTag).toBe(\"en\");\n\texpect(withMigration.languageTags).toEqual([\"en\", \"de\"]);\n\texpect(withMigration.locales).toEqual([\"en\", \"de\"]);\n});\n\n/**\n * Users are expected to treat baseLocale and locales as the source of truth.\n * The alternative is complicated merging logic which is not worth the effort.\n */\ntest(\"it should treat baseLocale and locales as source of truth\", async () => {\n\tconst settings: ProjectSettings = {\n\t\tbaseLocale: \"de\",\n\t\tlocales: [\"de\", \"en\", \"fr\", \"es\"],\n\t\tsourceLanguageTag: \"en\",\n\t\tlanguageTags: [\"en\", \"nl\"],\n\t};\n\n\tconst withMigration = withLanguageTagToLocaleMigration(settings);\n\n\texpect(withMigration.baseLocale).toBe(\"de\");\n\texpect(withMigration.sourceLanguageTag).toBe(\"de\");\n\texpect(withMigration.languageTags).toEqual([\"de\", \"en\", \"fr\", \"es\"]);\n\texpect(withMigration.locales).toEqual([\"de\", \"en\", \"fr\", \"es\"]);\n});\n"]}