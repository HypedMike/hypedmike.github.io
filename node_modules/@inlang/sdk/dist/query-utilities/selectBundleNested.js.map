{"version":3,"file":"selectBundleNested.js","sourceRoot":"/","sources":["query-utilities/selectBundleNested.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAGtD;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,EAAgC,EAAE,EAAE;IACtE,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;QAC7C,iCAAiC;QACjC,IAAI;QACJ,cAAc;QACd,iDAAiD;QACjD,aAAa,CACZ,EAAE;aACA,UAAU,CAAC,SAAS,CAAC;aACrB,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;YACf,kCAAkC;YAClC,IAAI;YACJ,UAAU;YACV,QAAQ;YACR,WAAW;YACX,iDAAiD;YACjD,aAAa,CACZ,EAAE;iBACA,UAAU,CAAC,SAAS,CAAC;iBACrB,MAAM,CAAC,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;iBACjD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE,YAAY,CAAC,CAClD,CAAC,EAAE,CAAC,UAAU,CAAC;SAChB,CAAC;aACD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE,WAAW,CAAC,CAChD,CAAC,EAAE,CAAC,UAAU,CAAC;KAChB,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Kysely } from \"kysely\";\nimport { jsonArrayFrom } from \"kysely/helpers/sqlite\";\nimport type { InlangDatabaseSchema } from \"../database/schema.js\";\n\n/**\n * Select bundles with nested messages and variants.\n *\n * `{ bundle, messages: [{ message, variants: [{ variant }] }] }`\n *\n * @example\n *   // getting one bundle where id is 123\n *   await selectBundleNested(db)\n *     .where(\"bundle.id\", \"=\", \"123\")\n *     .executeTakeFirst()\n *\n *   // getting all bundles\n *   await selectBundleNested(db)\n *     .execute()\n */\nexport const selectBundleNested = (db: Kysely<InlangDatabaseSchema>) => {\n\treturn db.selectFrom(\"bundle\").select((eb) => [\n\t\t// select all columns from bundle\n\t\t\"id\",\n\t\t\"declarations\",\n\t\t// select all columns from messages as \"messages\"\n\t\tjsonArrayFrom(\n\t\t\teb\n\t\t\t\t.selectFrom(\"message\")\n\t\t\t\t.select((eb) => [\n\t\t\t\t\t// select all columns from message\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"bundleId\",\n\t\t\t\t\t\"locale\",\n\t\t\t\t\t\"selectors\",\n\t\t\t\t\t// select all columns from variants as \"variants\"\n\t\t\t\t\tjsonArrayFrom(\n\t\t\t\t\t\teb\n\t\t\t\t\t\t\t.selectFrom(\"variant\")\n\t\t\t\t\t\t\t.select([\"id\", \"messageId\", \"matches\", \"pattern\"])\n\t\t\t\t\t\t\t.whereRef(\"variant.messageId\", \"=\", \"message.id\")\n\t\t\t\t\t).as(\"variants\"),\n\t\t\t\t])\n\t\t\t\t.whereRef(\"message.bundleId\", \"=\", \"bundle.id\")\n\t\t).as(\"messages\"),\n\t]);\n};\n"]}