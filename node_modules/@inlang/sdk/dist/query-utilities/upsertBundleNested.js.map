{"version":3,"file":"upsertBundleNested.js","sourceRoot":"/","sources":["query-utilities/upsertBundleNested.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACtC,EAAgC,EAChC,MAAuB,EACP,EAAE;IAClB,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC5C,MAAM,cAAc,GAAG,MAAM,GAAG;aAC9B,UAAU,CAAC,QAAQ,CAAC;aACpB,MAAM,CAAC;YACP,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,YAAY,EAAE,MAAM,CAAC,YAAY;SACjC,CAAC;aACD,SAAS,CAAC,IAAI,CAAC;aACf,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAClB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;YAC3B,GAAG,MAAM;YACT,+BAA+B;YAC/B,QAAQ,EAAE,SAAS;SACnB,CAAC,CACF;aACA,uBAAuB,EAAE,CAAC;QAE5B,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACvC,MAAM,eAAe,GAAG,MAAM,GAAG;iBAC/B,UAAU,CAAC,SAAS,CAAC;iBACrB,MAAM,CAAC;gBACP,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,QAAQ,EAAE,cAAc,CAAC,EAAE;gBAC3B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,OAAO,CAAC,SAAS;aAC5B,CAAC;iBACD,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAClB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;gBAC3B,GAAG,OAAO;gBACV,+BAA+B;gBAC/B,QAAQ,EAAE,SAAS;aACnB,CAAC,CACF;iBACA,SAAS,CAAC,IAAI,CAAC;iBACf,uBAAuB,EAAE,CAAC;YAE5B,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACxC,MAAM,GAAG;qBACP,UAAU,CAAC,SAAS,CAAC;qBACrB,MAAM,CAAC;oBACP,EAAE,EAAE,OAAO,CAAC,EAAE;oBACd,SAAS,EAAE,eAAe,CAAC,EAAE;oBAC7B,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,OAAO,EAAE,OAAO,CAAC,OAAO;iBACxB,CAAC;qBACD,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;qBACxD,OAAO,EAAE,CAAC;YACb,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Kysely } from \"kysely\";\nimport type {\n\tInlangDatabaseSchema,\n\tNewBundleNested,\n} from \"../database/schema.js\";\n\nexport const upsertBundleNested = async (\n\tdb: Kysely<InlangDatabaseSchema>,\n\tbundle: NewBundleNested\n): Promise<void> => {\n\tawait db.transaction().execute(async (trx) => {\n\t\tconst insertedBundle = await trx\n\t\t\t.insertInto(\"bundle\")\n\t\t\t.values({\n\t\t\t\tid: bundle.id,\n\t\t\t\tdeclarations: bundle.declarations,\n\t\t\t})\n\t\t\t.returning(\"id\")\n\t\t\t.onConflict((oc) =>\n\t\t\t\toc.column(\"id\").doUpdateSet({\n\t\t\t\t\t...bundle,\n\t\t\t\t\t// @ts-expect-error - undefined\n\t\t\t\t\tmessages: undefined,\n\t\t\t\t})\n\t\t\t)\n\t\t\t.executeTakeFirstOrThrow();\n\n\t\tfor (const message of bundle.messages) {\n\t\t\tconst insertedMessage = await trx\n\t\t\t\t.insertInto(\"message\")\n\t\t\t\t.values({\n\t\t\t\t\tid: message.id,\n\t\t\t\t\tbundleId: insertedBundle.id,\n\t\t\t\t\tlocale: message.locale,\n\t\t\t\t\tselectors: message.selectors,\n\t\t\t\t})\n\t\t\t\t.onConflict((oc) =>\n\t\t\t\t\toc.column(\"id\").doUpdateSet({\n\t\t\t\t\t\t...message,\n\t\t\t\t\t\t// @ts-expect-error - undefined\n\t\t\t\t\t\tvariants: undefined,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.returning(\"id\")\n\t\t\t\t.executeTakeFirstOrThrow();\n\n\t\t\tfor (const variant of message.variants) {\n\t\t\t\tawait trx\n\t\t\t\t\t.insertInto(\"variant\")\n\t\t\t\t\t.values({\n\t\t\t\t\t\tid: variant.id,\n\t\t\t\t\t\tmessageId: insertedMessage.id,\n\t\t\t\t\t\tmatches: variant.matches,\n\t\t\t\t\t\tpattern: variant.pattern,\n\t\t\t\t\t})\n\t\t\t\t\t.onConflict((oc) => oc.column(\"id\").doUpdateSet(variant))\n\t\t\t\t\t.execute();\n\t\t\t}\n\t\t}\n\t});\n};\n"]}